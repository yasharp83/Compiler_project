#entered node : Program
## Program : checking edge DeclarationList with look void
# DeclarationList matched with void
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look void
# Declaration matched with void
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look void
# DeclarationInitial matched with void
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_type , KEYWORD , void called
semantic_stack :  []
scopes : 
[(5, 'output', 'void', ['int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with void
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look void
## TypeSpecifier : checking edge void with look void
# void matched with void
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#define_id , ID , printArray called
semantic_stack :  ['void']
scopes : 
[(5, 'output', 'void', ['int']), (None, 'printArray', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_id , ID , printArray called
semantic_stack :  []
scopes : 
[(5, 'output', 'void', ['int']), (20020, 'printArray', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#check_void(f) , SYMBOL , ( called
semantic_stack :  [20020]
scopes : 
[(5, 'output', 'void', ['int']), (20020, 'printArray', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#define_function , SYMBOL , ( called
semantic_stack :  [20020]
scopes : 
[(5, 'output', 'void', ['int']), (20020, 'printArray', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#main_function , SYMBOL , ( called
semantic_stack :  [20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_type , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#define_id , ID , A called
semantic_stack :  [9, 20020, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(None, 'A', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_id , ID , A called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look [
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20020, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#pop , SYMBOL , , called
semantic_stack :  [9, 20020, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_type , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#define_id , ID , n called
semantic_stack :  [9, 20020, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None), (None, 'n', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#push_id , ID , n called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20020, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#pop , SYMBOL , ) called
semantic_stack :  [9, 20020, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', None)]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:1
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:2
#push_type , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:2
#define_id , ID , i called
semantic_stack :  [9, 20020, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(None, 'i', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:2
#push_id , ID , i called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:2
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20020, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:3
#pop , ID , i called
semantic_stack :  [9, 20020, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:3
#push_id , ID , i called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:3
#push_num , NUM , 0 called
semantic_stack :  [9, 20020, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:3
#assign , SYMBOL , ; called
semantic_stack :  [9, 20020, 20032, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:3
#pop , SYMBOL , ; called
semantic_stack :  [9, 20020, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#label , SYMBOL , ( called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#push_id , ID , i called
semantic_stack :  [9, 20020, 19]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20020, 19, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#push_id , ID , n called
semantic_stack :  [9, 20020, 19, 20032, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20020, 19, 20032, 'LT', 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#hold , SYMBOL , { called
semantic_stack :  [9, 20020, 19, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:4
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20020, 19, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#push_id , ID , output called
semantic_stack :  [9, 20020, 19, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#function_input_pass , ID , A called
semantic_stack :  [9, 20020, 19, 60000, 20, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#push_id , ID , A called
semantic_stack :  [9, 20020, 19, 60000, 20, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#push_id , ID , i called
semantic_stack :  [9, 20020, 19, 60000, 20, 5, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#push_array , SYMBOL , ) called
semantic_stack :  [9, 20020, 19, 60000, 20, 5, 20024, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with )
#entered node : H
## H : checking edge = with look )
## H : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## H : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## H : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20020, 19, 60000, 20, 5, '@60004']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:5
#pop , SYMBOL , ; called
semantic_stack :  [9, 20020, 19, 60000, 20, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#push_id , ID , i called
semantic_stack :  [9, 20020, 19, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#push_id , ID , i called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#push_num , NUM , 1 called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032, 20032, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032, 20032, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#assign , SYMBOL , ; called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:6
#pop , SYMBOL , ; called
semantic_stack :  [9, 20020, 19, 60000, 20, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:8
#while_jump , SYMBOL , } called
semantic_stack :  [9, 20020, 19, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:8
#scope_finish(c) , SYMBOL , } called
semantic_stack :  [9, 20020, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:8
#if_decide , SYMBOL , } called
semantic_stack :  [9, 20020, 60000, 20]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
[(20032, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
[(20024, 'A', 'array', None), (20028, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#function_return , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#pop , KEYWORD , int called
semantic_stack :  [9, 20020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#define_id , ID , Div called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (None, 'Div', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_id , ID , Div called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (20024, 'Div', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (20024, 'Div', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (20024, 'Div', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_type , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#define_id , ID , a called
semantic_stack :  [9, 20024, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_id , ID , a called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#pop , SYMBOL , , called
semantic_stack :  [9, 20024, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_type , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#define_id , ID , b called
semantic_stack :  [9, 20024, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_id , ID , b called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20024, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#pop , SYMBOL , , called
semantic_stack :  [9, 20024, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_type , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#define_id , ID , q called
semantic_stack :  [9, 20024, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (None, 'q', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#push_id , ID , q called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20024, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#pop , SYMBOL , ) called
semantic_stack :  [9, 20024, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', None)]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:10
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:11
#push_type , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:11
#define_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(None, 'biggestPow2', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:11
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:11
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20024, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#pop , KEYWORD , if called
semantic_stack :  [9, 20024, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#push_id , ID , b called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ==
# B matched with ==
#entered node : B
## B : checking edge = with look ==
## B : checking edge [ with look ==
## B : checking edge SimpleExpressionPrime with look ==
# SimpleExpressionPrime matched with ==
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ==
# AdditiveExpressionPrime matched with ==
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ==
# TermPrime matched with ==
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ==
# SignedFactorPrime matched with ==
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ==
# FactorPrime matched with ==
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ==
## FactorPrime : checking edge EPSILON with look ==
# EPSILON matched with ==
## TermPrime : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionPrime : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionPrime : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20024, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#push_num , NUM , 0 called
semantic_stack :  [9, 20024, 20032, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20024, 20032, 'EQ', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#hold , SYMBOL , { called
semantic_stack :  [9, 20024, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:12
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look NUM
# ReturnStmtPrime matched with NUM
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look NUM
## ReturnStmtPrime : checking edge Expression with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:13
#push_rv , NUM , 0 called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:13
#push_num , NUM , 0 called
semantic_stack :  [9, 20024, 60000, 79, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:13
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 60000, 79, 20012, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:13
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 60000, 79, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:14
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:14
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:14
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:14
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20024, 60000, 79]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:14
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#push_id , ID , a called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20024, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#push_id , ID , b called
semantic_stack :  [9, 20024, 20028, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20024, 20028, 'LT', 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#hold , SYMBOL , { called
semantic_stack :  [9, 20024, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:15
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:16
#push_rv , ID , q called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:16
#push_id , ID , q called
semantic_stack :  [9, 20024, 60004, 84, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:16
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 60004, 84, 20012, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:16
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 60004, 84, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:17
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:17
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:17
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:17
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20024, 60004, 84]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:17
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:18
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:18
#push_num , NUM , 1 called
semantic_stack :  [9, 20024, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:18
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 20040, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:18
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#label , SYMBOL , ( called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 89]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20024, 89, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_id , ID , b called
semantic_stack :  [9, 20024, 89, 20040, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## G : checking edge G with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#operand_exec , SYMBOL , * called
semantic_stack :  [9, 20024, 89, 20040, 'MULT', 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20024, 89, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_num , NUM , 2 called
semantic_stack :  [9, 20024, 89, 60008, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#operand_exec , SYMBOL , < called
semantic_stack :  [9, 20024, 89, 60008, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20024, 89, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_id , ID , a called
semantic_stack :  [9, 20024, 89, 60012, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## Term : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpression : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20024, 89, 60012, 'LT', 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#push_num , NUM , 1 called
semantic_stack :  [9, 20024, 89, 60012, 'LT', 20028, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20024, 89, 60012, 'LT', 20028, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20024, 89, 60012, 'LT', 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#hold , SYMBOL , { called
semantic_stack :  [9, 20024, 89, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:19
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20024, 89, 60020, 93]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 89, 60020, 93]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#push_num , NUM , 2 called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040, '#2', 'MULT', 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:20
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 89, 60020, 93, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#while_jump , ID , q called
semantic_stack :  [9, 20024, 89, 60020, 93]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#scope_finish(c) , ID , q called
semantic_stack :  [9, 20024, 60020, 93]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#if_decide , ID , q called
semantic_stack :  [9, 20024, 60020, 93]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#push_id , ID , q called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#push_id , ID , q called
semantic_stack :  [9, 20024, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20024, 20036, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 20036, 20036, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20024, 20036, 20036, 'ADD', 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 20036, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:22
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_rv , ID , Div called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , Div called
semantic_stack :  [9, 20024, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#function_input_pass , ID , a called
semantic_stack :  [9, 20024, 20012, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , a called
semantic_stack :  [9, 20024, 20012, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20024, 20012, 68, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , biggestPow2 called
semantic_stack :  [9, 20024, 20012, 68, 20028, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## Term : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20024, 20012, 68, 20028, 'SUB', 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , b called
semantic_stack :  [9, 20024, 20012, 68, 20028, 'SUB', 20040, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ,
# VarCallPrime matched with ,
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ,
## VarCallPrime : checking edge VarPrime with look ,
# VarPrime matched with ,
#entered node : VarPrime
## VarPrime : checking edge [ with look ,
## VarPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## G : checking edge G with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20024, 20012, 68, 20028, 'SUB', 20040, 'MULT', 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20024, 20012, 68, 20028, 'SUB', 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , b called
semantic_stack :  [9, 20024, 20012, 68, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#push_id , ID , q called
semantic_stack :  [9, 20024, 20012, 68, 60032, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20024, 20012, 68, 60032, 20032, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#assign , SYMBOL , ; called
semantic_stack :  [9, 20024, 20012, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:23
#pop , SYMBOL , ; called
semantic_stack :  [9, 20024, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:24
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:25
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:25
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:26
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:26
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
[(20040, 'biggestPow2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
[(20028, 'a', 'int', None), (20032, 'b', 'int', None), (20036, 'q', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#function_return , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#pop , KEYWORD , int called
semantic_stack :  [9, 20024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#define_id , ID , Mod called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (None, 'Mod', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_id , ID , Mod called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (20028, 'Mod', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (20028, 'Mod', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (20028, 'Mod', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_type , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#define_id , ID , a called
semantic_stack :  [9, 20028, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_id , ID , a called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#pop , SYMBOL , , called
semantic_stack :  [9, 20028, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_type , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#define_id , ID , b called
semantic_stack :  [9, 20028, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#push_id , ID , b called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20028, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#pop , SYMBOL , ) called
semantic_stack :  [9, 20028, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', None)]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:28
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_rv , ID , a called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_id , ID , a called
semantic_stack :  [9, 20028, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20028, 20012, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_id , ID , b called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## Term : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_id , ID , Div called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look (
# VarCallPrime matched with (
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look (
# ( matched with (
## VarCallPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#function_input_pass , ID , a called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_id , ID , a called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_id , ID , b called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 68, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#push_num , NUM , 0 called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 68, 20032, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## VarCallPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 68, 20032, 20036, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 20036, 'MULT', 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20028, 20012, 20032, 'SUB', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#assign , SYMBOL , ; called
semantic_stack :  [9, 20028, 20012, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:29
#pop , SYMBOL , ; called
semantic_stack :  [9, 20028, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:30
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
[(20032, 'a', 'int', None), (20036, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#function_return , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#pop , KEYWORD , int called
semantic_stack :  [9, 20028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#define_id , ID , Or called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (None, 'Or', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_id , ID , Or called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (20032, 'Or', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (20032, 'Or', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (20032, 'Or', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#define_id , ID , a called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_id , ID , a called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#pop , SYMBOL , , called
semantic_stack :  [9, 20032, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#define_id , ID , b called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#push_id , ID , b called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20032, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#pop , SYMBOL , ) called
semantic_stack :  [9, 20032, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', None)]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:32
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:33
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:33
#define_id , ID , tmp1 called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(None, 'tmp1', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:33
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:33
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20032, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:34
#pop , KEYWORD , int called
semantic_stack :  [9, 20032, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:34
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:34
#define_id , ID , tmp2 called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (None, 'tmp2', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:34
#push_id , ID , tmp2 called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:34
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20032, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:35
#pop , KEYWORD , int called
semantic_stack :  [9, 20032, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:35
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:35
#define_id , ID , msk called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (None, 'msk', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:35
#push_id , ID , msk called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:35
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20032, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:36
#pop , KEYWORD , int called
semantic_stack :  [9, 20032, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:36
#push_type , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:36
#define_id , ID , ans called
semantic_stack :  [9, 20032, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (None, 'ans', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:36
#push_id , ID , ans called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:36
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20032, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:37
#pop , ID , msk called
semantic_stack :  [9, 20032, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:37
#push_id , ID , msk called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:37
#push_num , NUM , 1 called
semantic_stack :  [9, 20032, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:37
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 20052, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:37
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:38
#push_id , ID , ans called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:38
#push_num , NUM , 0 called
semantic_stack :  [9, 20032, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:38
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 20056, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:38
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:39
#label , SYMBOL , ( called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:39
#push_num , NUM , 1 called
semantic_stack :  [9, 20032, 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:39
#hold , SYMBOL , { called
semantic_stack :  [9, 20032, 239, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:39
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_id , ID , a called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20032, 239, '#1', 239, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20036, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20036, 'LT', 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_id , ID , b called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000, 'ADD', 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000, 'ADD', 20040, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000, 'ADD', 20040, 'LT', 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 60000, 'ADD', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionZegond : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionZegond : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20032, 239, '#1', 239, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#push_num , NUM , 2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 60008, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 60008, 'EQ', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#hold , SYMBOL , { called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:40
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012, 244]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look break
# DeclarationList matched with break
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look break
## DeclarationList : checking edge EPSILON with look break
# EPSILON matched with break
## CompoundStmt : checking edge StatementList with look break
# StatementList matched with break
#entered node : StatementList
## StatementList : checking edge Statement with look break
# Statement matched with break
#entered node : Statement
## Statement : checking edge ExpressionStmt with look break
# ExpressionStmt matched with break
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look break
## ExpressionStmt : checking edge break with look break
# break matched with break
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:41
#jump_placeholder(c) , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012, 244]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:42
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012, 244]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:42
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012, 244]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:42
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20032, 239, '#1', 239, 60012, 244]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:42
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_id , ID , Mod called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#function_input_pass , ID , a called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_id , ID , a called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181, 20036, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#push_num , NUM , 2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181, 20036, 20052, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181, 20036, 20052, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 181, 20036, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:43
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_id , ID , tmp2 called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_id , ID , Mod called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#function_input_pass , ID , b called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_id , ID , b called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181, 20040, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#push_num , NUM , 2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181, 20040, 20052, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181, 20040, 20052, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 181, 20040, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:44
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look (
# AdditiveExpression matched with (
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052, 'LT', 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#push_num , NUM , 1 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052, 'LT', 20044, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052, 'LT', 20044, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 20052, 'LT', 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:45
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_id , ID , tmp2 called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look (
# AdditiveExpression matched with (
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_id , ID , tmp2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052, 'LT', 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#push_num , NUM , 1 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052, 'LT', 20048, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052, 'LT', 20048, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 20052, 'LT', 60040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048, 60044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:46
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_num , NUM , 0 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionZegond : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionZegond : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look (
# AdditiveExpression matched with (
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0', 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0', 'LT', 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#push_id , ID , tmp2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0', 'LT', 20044, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0', 'LT', 20044, 'ADD', 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, '#0', 'LT', 60048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044, 60052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:47
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_id , ID , ans called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_id , ID , ans called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_id , ID , tmp1 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## Term : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056, 'ADD', 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056, 'ADD', 20044, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056, 'ADD', 20044, 'MULT', 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 20056, 'ADD', 60056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056, 60060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:48
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#scope_finish(s) , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#backpatch_jump(t) , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#push_id , ID , msk called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#push_num , NUM , 2 called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052, 20052, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052, 20052, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:50
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 239, '#1', 239, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#while_jump , KEYWORD , return called
semantic_stack :  [9, 20032, 239, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#scope_finish(c) , KEYWORD , return called
semantic_stack :  [9, 20032, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#if_decide , KEYWORD , return called
semantic_stack :  [9, 20032, '#1', 239]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#push_rv , ID , ans called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#push_id , ID , ans called
semantic_stack :  [9, 20032, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#assign , SYMBOL , ; called
semantic_stack :  [9, 20032, 20012, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:52
#pop , SYMBOL , ; called
semantic_stack :  [9, 20032, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:53
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
[(20044, 'tmp1', 'int', None), (20048, 'tmp2', 'int', None), (20052, 'msk', 'int', None), (20056, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
[(20036, 'a', 'int', None), (20040, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#function_return , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#pop , KEYWORD , int called
semantic_stack :  [9, 20032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#define_id , ID , And called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (None, 'And', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_id , ID , And called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (20036, 'And', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (20036, 'And', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (20036, 'And', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#define_id , ID , a called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_id , ID , a called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#pop , SYMBOL , , called
semantic_stack :  [9, 20036, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#define_id , ID , b called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#push_id , ID , b called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20036, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#pop , SYMBOL , ) called
semantic_stack :  [9, 20036, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', None)]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:55
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:56
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:56
#define_id , ID , tmp1 called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(None, 'tmp1', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:56
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:56
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20036, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:57
#pop , KEYWORD , int called
semantic_stack :  [9, 20036, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:57
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:57
#define_id , ID , tmp2 called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (None, 'tmp2', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:57
#push_id , ID , tmp2 called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:57
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20036, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:58
#pop , KEYWORD , int called
semantic_stack :  [9, 20036, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:58
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:58
#define_id , ID , msk called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (None, 'msk', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:58
#push_id , ID , msk called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:58
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20036, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:59
#pop , KEYWORD , int called
semantic_stack :  [9, 20036, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:59
#push_type , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:59
#define_id , ID , ans called
semantic_stack :  [9, 20036, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (None, 'ans', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:59
#push_id , ID , ans called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:59
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20036, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:60
#pop , ID , msk called
semantic_stack :  [9, 20036, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:60
#push_id , ID , msk called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:60
#push_num , NUM , 1 called
semantic_stack :  [9, 20036, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:60
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 20056, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:60
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:61
#push_id , ID , ans called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:61
#push_num , NUM , 0 called
semantic_stack :  [9, 20036, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:61
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 20060, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:61
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:62
#label , SYMBOL , ( called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:62
#push_num , NUM , 1 called
semantic_stack :  [9, 20036, 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:62
#hold , SYMBOL , { called
semantic_stack :  [9, 20036, 420, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:62
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_id , ID , a called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20036, 420, '#1', 420, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20040, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20040, 'LT', 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_id , ID , b called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000, 'ADD', 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000, 'ADD', 20044, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000, 'ADD', 20044, 'LT', 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 60000, 'ADD', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionZegond : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionZegond : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20036, 420, '#1', 420, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#push_num , NUM , 2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 60008, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 60008, 'EQ', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#hold , SYMBOL , { called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:63
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012, 425]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look break
# DeclarationList matched with break
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look break
## DeclarationList : checking edge EPSILON with look break
# EPSILON matched with break
## CompoundStmt : checking edge StatementList with look break
# StatementList matched with break
#entered node : StatementList
## StatementList : checking edge Statement with look break
# Statement matched with break
#entered node : Statement
## Statement : checking edge ExpressionStmt with look break
# ExpressionStmt matched with break
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look break
## ExpressionStmt : checking edge break with look break
# break matched with break
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:64
#jump_placeholder(c) , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012, 425]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:65
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012, 425]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:65
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012, 425]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:65
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20036, 420, '#1', 420, 60012, 425]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:65
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_id , ID , Mod called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#function_input_pass , ID , a called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_id , ID , a called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181, 20040, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#push_num , NUM , 2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181, 20040, 20056, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181, 20040, 20056, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 181, 20040, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:66
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_id , ID , tmp2 called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_id , ID , Mod called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#function_input_pass , ID , b called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_id , ID , b called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181, 20044, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#push_num , NUM , 2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181, 20044, 20056, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181, 20044, 20056, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 181, 20044, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:67
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look (
# AdditiveExpression matched with (
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056, 'LT', 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#push_num , NUM , 1 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056, 'LT', 20048, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056, 'LT', 20048, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20056, 'LT', 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:68
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_id , ID , tmp2 called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look (
# AdditiveExpression matched with (
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_id , ID , tmp2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056, 'LT', 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#push_num , NUM , 1 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056, 'LT', 20052, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056, 'LT', 20052, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 20056, 'LT', 60040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052, 60044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:69
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_id , ID , tmp2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20048, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 20048, 'ADD', 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionZegond : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionZegond : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#push_num , NUM , 2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60048, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60048, 'EQ', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048, 60052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:70
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_id , ID , ans called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_id , ID , ans called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_id , ID , tmp1 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## Term : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060, 'ADD', 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060, 'ADD', 20048, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060, 'ADD', 20048, 'MULT', 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 20060, 'ADD', 60056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060, 60060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:71
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#scope_finish(s) , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#backpatch_jump(t) , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#push_id , ID , msk called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#push_num , NUM , 2 called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056, 20056, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056, 20056, 'MULT', '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:73
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 420, '#1', 420, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#while_jump , KEYWORD , return called
semantic_stack :  [9, 20036, 420, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#scope_finish(c) , KEYWORD , return called
semantic_stack :  [9, 20036, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#if_decide , KEYWORD , return called
semantic_stack :  [9, 20036, '#1', 420]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#push_rv , ID , ans called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#push_id , ID , ans called
semantic_stack :  [9, 20036, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#assign , SYMBOL , ; called
semantic_stack :  [9, 20036, 20012, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:75
#pop , SYMBOL , ; called
semantic_stack :  [9, 20036, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:76
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
[(20048, 'tmp1', 'int', None), (20052, 'tmp2', 'int', None), (20056, 'msk', 'int', None), (20060, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
[(20040, 'a', 'int', None), (20044, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#function_return , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#pop , KEYWORD , int called
semantic_stack :  [9, 20036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#define_id , ID , Xor called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (None, 'Xor', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_id , ID , Xor called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (20040, 'Xor', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (20040, 'Xor', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (20040, 'Xor', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_type , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#define_id , ID , a called
semantic_stack :  [9, 20040, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_id , ID , a called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#pop , SYMBOL , , called
semantic_stack :  [9, 20040, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_type , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#define_id , ID , b called
semantic_stack :  [9, 20040, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#push_id , ID , b called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20040, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#pop , SYMBOL , ) called
semantic_stack :  [9, 20040, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', None)]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:78
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_rv , ID , Or called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , Or called
semantic_stack :  [9, 20040, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#function_input_pass , ID , a called
semantic_stack :  [9, 20040, 20012, 226]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , a called
semantic_stack :  [9, 20040, 20012, 226]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , b called
semantic_stack :  [9, 20040, 20012, 226, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20040, 20012, 226, 20044, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20040, 20012, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , And called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look (
# VarCallPrime matched with (
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look (
# ( matched with (
## VarCallPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#function_input_pass , ID , a called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB', 407]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , a called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB', 407]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#push_id , ID , b called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB', 407, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## VarCallPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB', 407, 20044, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20040, 20012, 60000, 'SUB', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#assign , SYMBOL , ; called
semantic_stack :  [9, 20040, 20012, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:79
#pop , SYMBOL , ; called
semantic_stack :  [9, 20040, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:80
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
[(20044, 'a', 'int', None), (20048, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#function_return , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#pop , KEYWORD , int called
semantic_stack :  [9, 20040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#define_id , ID , Power called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (None, 'Power', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_id , ID , Power called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (20044, 'Power', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (20044, 'Power', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (20044, 'Power', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_type , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#define_id , ID , a called
semantic_stack :  [9, 20044, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_id , ID , a called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#pop , SYMBOL , , called
semantic_stack :  [9, 20044, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_type , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#define_id , ID , b called
semantic_stack :  [9, 20044, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#push_id , ID , b called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20044, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#pop , SYMBOL , ) called
semantic_stack :  [9, 20044, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', None)]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:82
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:83
#push_type , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:83
#define_id , ID , tmp1 called
semantic_stack :  [9, 20044, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(None, 'tmp1', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:83
#push_id , ID , tmp1 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:83
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20044, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:84
#pop , KEYWORD , int called
semantic_stack :  [9, 20044, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:84
#push_type , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:84
#define_id , ID , tmp2 called
semantic_stack :  [9, 20044, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (None, 'tmp2', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:84
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:84
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#pop , KEYWORD , if called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#push_id , ID , b called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ==
# B matched with ==
#entered node : B
## B : checking edge = with look ==
## B : checking edge [ with look ==
## B : checking edge SimpleExpressionPrime with look ==
# SimpleExpressionPrime matched with ==
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ==
# AdditiveExpressionPrime matched with ==
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ==
# TermPrime matched with ==
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ==
# SignedFactorPrime matched with ==
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ==
# FactorPrime matched with ==
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ==
## FactorPrime : checking edge EPSILON with look ==
# EPSILON matched with ==
## TermPrime : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionPrime : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionPrime : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20044, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#push_num , NUM , 0 called
semantic_stack :  [9, 20044, 20052, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20044, 20052, 'EQ', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#hold , SYMBOL , { called
semantic_stack :  [9, 20044, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:85
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look NUM
# ReturnStmtPrime matched with NUM
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look NUM
## ReturnStmtPrime : checking edge Expression with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:86
#push_rv , NUM , 1 called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:86
#push_num , NUM , 1 called
semantic_stack :  [9, 20044, 60000, 671, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:86
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 60000, 671, 20012, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:86
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 60000, 671, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20044, 60000, 671]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look if
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#scope_start(s) , KEYWORD , if called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#push_id , ID , b called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ==
# B matched with ==
#entered node : B
## B : checking edge = with look ==
## B : checking edge [ with look ==
## B : checking edge SimpleExpressionPrime with look ==
# SimpleExpressionPrime matched with ==
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ==
# AdditiveExpressionPrime matched with ==
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ==
# TermPrime matched with ==
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ==
# SignedFactorPrime matched with ==
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ==
# FactorPrime matched with ==
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ==
## FactorPrime : checking edge EPSILON with look ==
# EPSILON matched with ==
## TermPrime : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionPrime : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionPrime : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20044, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look NUM
# AdditiveExpression matched with NUM
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#push_num , NUM , 1 called
semantic_stack :  [9, 20044, 20052, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20044, 20052, 'EQ', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#hold , SYMBOL , { called
semantic_stack :  [9, 20044, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:87
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:88
#push_rv , ID , a called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:88
#push_id , ID , a called
semantic_stack :  [9, 20044, 60004, 676, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:88
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 60004, 676, 20012, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:88
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 60004, 676, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:89
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:89
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:89
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:89
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20044, 60004, 676]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:89
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#push_id , ID , tmp1 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#push_id , ID , Mod called
semantic_stack :  [9, 20044, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#function_input_pass , ID , b called
semantic_stack :  [9, 20044, 20056, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#push_id , ID , b called
semantic_stack :  [9, 20044, 20056, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#push_num , NUM , 2 called
semantic_stack :  [9, 20044, 20056, 181, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20044, 20056, 181, 20052, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 20056, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:90
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#push_id , ID , Div called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#function_input_pass , ID , b called
semantic_stack :  [9, 20044, 20060, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#push_id , ID , b called
semantic_stack :  [9, 20044, 20060, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#push_num , NUM , 2 called
semantic_stack :  [9, 20044, 20060, 68, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#push_num , NUM , 0 called
semantic_stack :  [9, 20044, 20060, 68, 20052, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20044, 20060, 68, 20052, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 20060, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:91
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#push_id , ID , Power called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#function_input_pass , ID , a called
semantic_stack :  [9, 20044, 20060, 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#push_id , ID , a called
semantic_stack :  [9, 20044, 20060, 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044, 20060, 661, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20044, 20060, 661, 20048, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 20060, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:92
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_rv , ID , tmp2 called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20044, 20012, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_id , ID , tmp2 called
semantic_stack :  [9, 20044, 20012, 20060, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look *
# VarCallPrime matched with *
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look *
## VarCallPrime : checking edge VarPrime with look *
# VarPrime matched with *
#entered node : VarPrime
## VarPrime : checking edge [ with look *
## VarPrime : checking edge EPSILON with look *
# EPSILON matched with *
## G : checking edge G with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#operand_exec , SYMBOL , * called
semantic_stack :  [9, 20044, 20012, 20060, 'MULT', 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20044, 20012, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_id , ID , Power called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look (
# VarCallPrime matched with (
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look (
# ( matched with (
## VarCallPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#function_input_pass , ID , a called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT', 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_id , ID , a called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT', 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#push_id , ID , tmp1 called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT', 661, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## VarCallPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT', 661, 20048, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20044, 20012, 60020, 'MULT', 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#assign , SYMBOL , ; called
semantic_stack :  [9, 20044, 20012, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:93
#pop , SYMBOL , ; called
semantic_stack :  [9, 20044, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:94
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:95
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:95
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:95
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:95
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
[(20056, 'tmp1', 'int', None), (20060, 'tmp2', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
[(20048, 'a', 'int', None), (20052, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#function_return , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#pop , KEYWORD , int called
semantic_stack :  [9, 20044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#define_id , ID , SQRT called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (None, 'SQRT', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_id , ID , SQRT called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (20048, 'SQRT', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (20048, 'SQRT', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (20048, 'SQRT', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_type , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#define_id , ID , a called
semantic_stack :  [9, 20048, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_id , ID , a called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#pop , SYMBOL , , called
semantic_stack :  [9, 20048, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_type , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#define_id , ID , b called
semantic_stack :  [9, 20048, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#push_id , ID , b called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#check_void(v) , SYMBOL , ) called
semantic_stack :  [9, 20048, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#pop , SYMBOL , ) called
semantic_stack :  [9, 20048, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', None)]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:97
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:98
#push_type , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:98
#define_id , ID , l called
semantic_stack :  [9, 20048, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(None, 'l', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:98
#push_id , ID , l called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:98
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20048, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:99
#pop , KEYWORD , int called
semantic_stack :  [9, 20048, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:99
#push_type , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:99
#define_id , ID , r called
semantic_stack :  [9, 20048, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (None, 'r', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:99
#push_id , ID , r called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:99
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20048, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:100
#pop , KEYWORD , int called
semantic_stack :  [9, 20048, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:100
#push_type , KEYWORD , int called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:100
#define_id , ID , mid called
semantic_stack :  [9, 20048, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (None, 'mid', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:100
#push_id , ID , mid called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:100
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20048, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:101
#pop , ID , l called
semantic_stack :  [9, 20048, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:101
#push_id , ID , l called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:101
#push_num , NUM , 0 called
semantic_stack :  [9, 20048, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:101
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 20060, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:101
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#push_id , ID , r called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#push_id , ID , a called
semantic_stack :  [9, 20048, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20048, 20064, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#push_num , NUM , 1 called
semantic_stack :  [9, 20048, 20064, 20052, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20048, 20064, 20052, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 20064, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:102
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#label , SYMBOL , ( called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#push_num , NUM , 1 called
semantic_stack :  [9, 20048, 907]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionZegond : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionZegond : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20048, 907, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#push_id , ID , r called
semantic_stack :  [9, 20048, 907, '#1', 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look -
# VarCallPrime matched with -
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look -
## VarCallPrime : checking edge VarPrime with look -
# VarPrime matched with -
#entered node : VarPrime
## VarPrime : checking edge [ with look -
## VarPrime : checking edge EPSILON with look -
# EPSILON matched with -
## Term : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpression : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20048, 907, '#1', 'LT', 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#push_id , ID , l called
semantic_stack :  [9, 20048, 907, '#1', 'LT', 20064, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20048, 907, '#1', 'LT', 20064, 'SUB', 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20048, 907, '#1', 'LT', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#hold , SYMBOL , { called
semantic_stack :  [9, 20048, 907, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:103
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_id , ID , mid called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_id , ID , Div called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#function_input_pass , ID , r called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_id , ID , r called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_id , ID , l called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 20064, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ,
# VarCallPrime matched with ,
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ,
## VarCallPrime : checking edge VarPrime with look ,
# VarPrime matched with ,
#entered node : VarPrime
## VarPrime : checking edge [ with look ,
## VarPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 20064, 'ADD', 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_num , NUM , 2 called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#push_num , NUM , 0 called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 60012, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 68, 60012, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:104
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#push_id , ID , a called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#push_id , ID , Power called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look (
# VarCallPrime matched with (
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look (
# ( matched with (
## VarCallPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#function_input_pass , ID , mid called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT', 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#push_id , ID , mid called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT', 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#push_id , ID , b called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT', 661, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## VarCallPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT', 661, 20068, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20048, 907, 60008, 909, 20052, 'LT', 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#hold , SYMBOL , { called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:105
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:106
#push_id , ID , r called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:106
#push_id , ID , mid called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:106
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029, 20064, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:106
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:107
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:107
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:107
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20048, 907, 60008, 909, 60024, 1029]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:107
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:108
#push_id , ID , l called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:108
#push_id , ID , mid called
semantic_stack :  [9, 20048, 907, 60008, 909, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:108
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 20060, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:108
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 907, 60008, 909, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:110
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:110
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#while_jump , KEYWORD , return called
semantic_stack :  [9, 20048, 907, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#scope_finish(c) , KEYWORD , return called
semantic_stack :  [9, 20048, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#if_decide , KEYWORD , return called
semantic_stack :  [9, 20048, 60008, 909]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#push_rv , ID , l called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#push_id , ID , l called
semantic_stack :  [9, 20048, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#assign , SYMBOL , ; called
semantic_stack :  [9, 20048, 20012, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:111
#pop , SYMBOL , ; called
semantic_stack :  [9, 20048, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:112
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#scope_finish(f) , KEYWORD , void called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
[(20060, 'l', 'int', None), (20064, 'r', 'int', None), (20068, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#scope_finish(t) , KEYWORD , void called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
[(20052, 'a', 'int', None), (20056, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#function_return , KEYWORD , void called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#pop , KEYWORD , void called
semantic_stack :  [9, 20048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look void
# DeclarationList matched with void
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look void
# Declaration matched with void
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look void
# DeclarationInitial matched with void
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#push_type , KEYWORD , void called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with void
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look void
## TypeSpecifier : checking edge void with look void
# void matched with void
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#define_id , ID , BinaryPrint called
semantic_stack :  [9, 'void']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (None, 'BinaryPrint', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#push_id , ID , BinaryPrint called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (20052, 'BinaryPrint', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (20052, 'BinaryPrint', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (20052, 'BinaryPrint', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#define_id , ID , a called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#push_id , ID , a called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[(20056, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look )
# ParamPrime matched with )
#entered node : ParamPrime
## ParamPrime : checking edge [ with look )
## ParamPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Params : checking edge ParamList with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#pop , SYMBOL , ) called
semantic_stack :  [9, 20052, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[(20056, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', None)]
[(20056, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:114
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:115
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:115
#define_id , ID , Length called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(None, 'Length', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:115
#push_id , ID , Length called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:115
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20052, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#pop , KEYWORD , int called
semantic_stack :  [9, 20052, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#define_id , ID , Ar called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (None, 'Ar', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#push_id , ID , Ar called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look [
# DeclarationPrime matched with [
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look [
## DeclarationPrime : checking edge VarDeclarationPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20052, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with [
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look [
## VarDeclarationPrime : checking edge [ with look [
# [ matched with [
## VarDeclarationPrime : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#push_num , NUM , 1024 called
semantic_stack :  [9, 20052, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## VarDeclarationPrime : checking edge ] with look ]
# ] matched with ]
## VarDeclarationPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#define_array , SYMBOL , ; called
semantic_stack :  [9, 20052, 20064, '#1024']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:116
#type_to_array , SYMBOL , ; called
semantic_stack :  [9, 20052, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:117
#pop , KEYWORD , int called
semantic_stack :  [9, 20052, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:117
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:117
#define_id , ID , i called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (None, 'i', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:117
#push_id , ID , i called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:117
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20052, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:118
#pop , KEYWORD , int called
semantic_stack :  [9, 20052, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:118
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:118
#define_id , ID , tmp called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (None, 'tmp', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:118
#push_id , ID , tmp called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:118
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20052, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:119
#pop , KEYWORD , int called
semantic_stack :  [9, 20052, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:119
#push_type , KEYWORD , int called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:119
#define_id , ID , ans called
semantic_stack :  [9, 20052, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (None, 'ans', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:119
#push_id , ID , ans called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:119
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20052, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:120
#pop , ID , Length called
semantic_stack :  [9, 20052, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:120
#push_id , ID , Length called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:120
#push_num , NUM , 16 called
semantic_stack :  [9, 20052, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:120
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 20060, '#16']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:120
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:121
#push_id , ID , i called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:121
#push_num , NUM , 0 called
semantic_stack :  [9, 20052, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:121
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 20068, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:121
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:122
#push_id , ID , ans called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:122
#push_num , NUM , 0 called
semantic_stack :  [9, 20052, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:122
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 20076, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:122
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:123
#label , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:123
#push_id , ID , a called
semantic_stack :  [9, 20052, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look NUM
## Expression : no edge matched with look NUM and not in follows
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:123
#hold , SYMBOL , { called
semantic_stack :  [9, 20052, 1056, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:123
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#push_id , ID , tmp called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#push_id , ID , Mod called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#function_input_pass , ID , a called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#push_id , ID , a called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072, 181]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#push_num , NUM , 2 called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072, 181, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072, 181, 20056, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:124
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#push_id , ID , a called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#push_id , ID , Div called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#function_input_pass , ID , a called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#push_id , ID , a called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#push_num , NUM , 2 called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 68, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#push_num , NUM , 0 called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 68, 20056, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 68, 20056, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:125
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#push_id , ID , Ar called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#push_id , ID , i called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#push_array , SYMBOL , = called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20064, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#push_id , ID , tmp called
semantic_stack :  [9, 20052, 1056, 20056, 1056, '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, '@60008', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:126
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#push_id , ID , i called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#push_id , ID , i called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#push_num , NUM , 1 called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068, 20068, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068, 20068, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:127
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1056, 20056, 1056, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#while_jump , KEYWORD , while called
semantic_stack :  [9, 20052, 1056, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#scope_finish(c) , KEYWORD , while called
semantic_stack :  [9, 20052, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#if_decide , KEYWORD , while called
semantic_stack :  [9, 20052, 20056, 1056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#label , SYMBOL , ( called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#push_id , ID , i called
semantic_stack :  [9, 20052, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look NUM
## Expression : no edge matched with look NUM and not in follows
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#hold , SYMBOL , { called
semantic_stack :  [9, 20052, 1157, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:129
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20052, 1157, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#push_id , ID , i called
semantic_stack :  [9, 20052, 1157, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#push_id , ID , i called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#push_num , NUM , 1 called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068, 20068, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068, 20068, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:130
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_id , ID , ans called
semantic_stack :  [9, 20052, 1157, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_id , ID , ans called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look *
# B matched with *
#entered node : B
## B : checking edge = with look *
## B : checking edge [ with look *
## B : checking edge SimpleExpressionPrime with look *
# SimpleExpressionPrime matched with *
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look *
# AdditiveExpressionPrime matched with *
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look *
# TermPrime matched with *
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look *
# SignedFactorPrime matched with *
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look *
# FactorPrime matched with *
#entered node : FactorPrime
## FactorPrime : checking edge ( with look *
## FactorPrime : checking edge EPSILON with look *
# EPSILON matched with *
## TermPrime : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_num , NUM , 10 called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 20076, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## G : checking edge G with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#operand_exec , SYMBOL , + called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 20076, 'MULT', '#10']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_id , ID , Ar called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60004, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look [
# VarCallPrime matched with [
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look [
## VarCallPrime : checking edge VarPrime with look [
# VarPrime matched with [
#entered node : VarPrime
## VarPrime : checking edge [ with look [
# [ matched with [
## VarPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_id , ID , i called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60004, 'ADD', 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## VarPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#push_array , SYMBOL , ] called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60004, 'ADD', 20064, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60004, 'ADD', '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#assign , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:131
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 1157, 20068, 1157, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#while_jump , ID , output called
semantic_stack :  [9, 20052, 1157, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#scope_finish(c) , ID , output called
semantic_stack :  [9, 20052, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#if_decide , ID , output called
semantic_stack :  [9, 20052, 20068, 1157]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#push_id , ID , output called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#function_input_pass , ID , ans called
semantic_stack :  [9, 20052, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#push_id , ID , ans called
semantic_stack :  [9, 20052, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20052, 5, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:133
#pop , SYMBOL , ; called
semantic_stack :  [9, 20052, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#scope_finish(f) , KEYWORD , void called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
[(20060, 'Length', 'int', None), (20064, 'Ar', 'array', None), (20068, 'i', 'int', None), (20072, 'tmp', 'int', None), (20076, 'ans', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#scope_finish(t) , KEYWORD , void called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
[(20056, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#function_return , KEYWORD , void called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , KEYWORD , void called
semantic_stack :  [9, 20052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look void
# DeclarationList matched with void
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look void
# Declaration matched with void
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look void
# DeclarationInitial matched with void
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , void called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with void
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look void
## TypeSpecifier : checking edge void with look void
# void matched with void
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , buildTree called
semantic_stack :  [9, 'void']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (None, 'buildTree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , buildTree called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (20056, 'buildTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (20056, 'buildTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (20056, 'buildTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , node called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(None, 'node', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , node called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , SYMBOL , , called
semantic_stack :  [9, 20056, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , start called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (None, 'start', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , start called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20056, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , SYMBOL , , called
semantic_stack :  [9, 20056, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , end called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (None, 'end', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , end called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20056, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , SYMBOL , , called
semantic_stack :  [9, 20056, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , base called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (None, 'base', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , base called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20056, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20056, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , SYMBOL , , called
semantic_stack :  [9, 20056, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#define_id , ID , tree called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (None, 'tree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#push_id , ID , tree called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20056, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20056, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#pop , SYMBOL , ) called
semantic_stack :  [9, 20056, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', None)]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:137
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:138
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:138
#define_id , ID , mid called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(None, 'mid', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:138
#push_id , ID , mid called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:138
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20056, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:139
#pop , KEYWORD , int called
semantic_stack :  [9, 20056, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:139
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:139
#define_id , ID , leftChild called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (None, 'leftChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:139
#push_id , ID , leftChild called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:139
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20056, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:140
#pop , KEYWORD , int called
semantic_stack :  [9, 20056, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:140
#push_type , KEYWORD , int called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:140
#define_id , ID , rigtChild called
semantic_stack :  [9, 20056, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (None, 'rigtChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:140
#push_id , ID , rigtChild called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:140
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20056, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#pop , KEYWORD , if called
semantic_stack :  [9, 20056, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#push_id , ID , start called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ==
# B matched with ==
#entered node : B
## B : checking edge = with look ==
## B : checking edge [ with look ==
## B : checking edge SimpleExpressionPrime with look ==
# SimpleExpressionPrime matched with ==
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ==
# AdditiveExpressionPrime matched with ==
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ==
# TermPrime matched with ==
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ==
# SignedFactorPrime matched with ==
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ==
# FactorPrime matched with ==
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ==
## FactorPrime : checking edge EPSILON with look ==
# EPSILON matched with ==
## TermPrime : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionPrime : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionPrime : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20056, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#push_id , ID , end called
semantic_stack :  [9, 20056, 20064, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20056, 20064, 'EQ', 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#hold , SYMBOL , { called
semantic_stack :  [9, 20056, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:141
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20056, 60000, 1229]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_id , ID , tree called
semantic_stack :  [9, 20056, 60000, 1229]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_id , ID , node called
semantic_stack :  [9, 20056, 60000, 1229, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_array , SYMBOL , = called
semantic_stack :  [9, 20056, 60000, 1229, 20076, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_id , ID , base called
semantic_stack :  [9, 20056, 60000, 1229, '@60004']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_id , ID , start called
semantic_stack :  [9, 20056, 60000, 1229, '@60004', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#push_array , SYMBOL , ; called
semantic_stack :  [9, 20056, 60000, 1229, '@60004', 20072, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with ;
#entered node : H
## H : checking edge = with look ;
## H : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#assign , SYMBOL , ; called
semantic_stack :  [9, 20056, 60000, 1229, '@60004', '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:142
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 60000, 1229, '@60004']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:143
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20056, 60000, 1229]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:143
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20056, 60000, 1229]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:143
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20056, 60000, 1229]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:143
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_id , ID , mid called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_id , ID , Div called
semantic_stack :  [9, 20056, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#function_input_pass , ID , start called
semantic_stack :  [9, 20056, 20080, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_id , ID , start called
semantic_stack :  [9, 20056, 20080, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20056, 20080, 68, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_id , ID , end called
semantic_stack :  [9, 20056, 20080, 68, 20064, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ,
# VarCallPrime matched with ,
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ,
## VarCallPrime : checking edge VarPrime with look ,
# VarPrime matched with ,
#entered node : VarPrime
## VarPrime : checking edge [ with look ,
## VarPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20056, 20080, 68, 20064, 'ADD', 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_num , NUM , 2 called
semantic_stack :  [9, 20056, 20080, 68, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#push_num , NUM , 0 called
semantic_stack :  [9, 20056, 20080, 68, 60004, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20056, 20080, 68, 60004, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#assign , SYMBOL , ; called
semantic_stack :  [9, 20056, 20080, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:144
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#push_id , ID , leftChild called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#push_num , NUM , 2 called
semantic_stack :  [9, 20056, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20056, 20084, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#push_id , ID , node called
semantic_stack :  [9, 20056, 20084, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20056, 20084, '#2', 'MULT', 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#assign , SYMBOL , ; called
semantic_stack :  [9, 20056, 20084, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:145
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_id , ID , rigtChild called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_num , NUM , 2 called
semantic_stack :  [9, 20056, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20056, 20088, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_id , ID , node called
semantic_stack :  [9, 20056, 20088, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## G : checking edge G with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#operand_exec , SYMBOL , + called
semantic_stack :  [9, 20056, 20088, '#2', 'MULT', 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20056, 20088, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#push_num , NUM , 1 called
semantic_stack :  [9, 20056, 20088, 60016, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20056, 20088, 60016, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#assign , SYMBOL , ; called
semantic_stack :  [9, 20056, 20088, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:146
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , buildTree called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#function_input_pass , ID , leftChild called
semantic_stack :  [9, 20056, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , leftChild called
semantic_stack :  [9, 20056, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , start called
semantic_stack :  [9, 20056, 1212, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , mid called
semantic_stack :  [9, 20056, 1212, 20084, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , base called
semantic_stack :  [9, 20056, 1212, 20084, 20064, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#push_id , ID , tree called
semantic_stack :  [9, 20056, 1212, 20084, 20064, 20080, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20056, 1212, 20084, 20064, 20080, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:147
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , buildTree called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#function_input_pass , ID , rigtChild called
semantic_stack :  [9, 20056, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , rigtChild called
semantic_stack :  [9, 20056, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , mid called
semantic_stack :  [9, 20056, 1212, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20056, 1212, 20088, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_num , NUM , 1 called
semantic_stack :  [9, 20056, 1212, 20088, 20080, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20056, 1212, 20088, 20080, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , end called
semantic_stack :  [9, 20056, 1212, 20088, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , base called
semantic_stack :  [9, 20056, 1212, 20088, 60028, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#push_id , ID , tree called
semantic_stack :  [9, 20056, 1212, 20088, 60028, 20068, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20056, 1212, 20088, 60028, 20068, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:148
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , tree called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , node called
semantic_stack :  [9, 20056, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_array , SYMBOL , = called
semantic_stack :  [9, 20056, 20076, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , tree called
semantic_stack :  [9, 20056, '@60036']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , leftChild called
semantic_stack :  [9, 20056, '@60036', 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_array , SYMBOL , + called
semantic_stack :  [9, 20056, '@60036', 20076, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with +
#entered node : H
## H : checking edge = with look +
## H : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## H : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20056, '@60036', '@60040']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , tree called
semantic_stack :  [9, 20056, '@60036', '@60040', 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look [
# VarCallPrime matched with [
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look [
## VarCallPrime : checking edge VarPrime with look [
# VarPrime matched with [
#entered node : VarPrime
## VarPrime : checking edge [ with look [
# [ matched with [
## VarPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_id , ID , rigtChild called
semantic_stack :  [9, 20056, '@60036', '@60040', 'ADD', 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## VarPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#push_array , SYMBOL , ] called
semantic_stack :  [9, 20056, '@60036', '@60040', 'ADD', 20076, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20056, '@60036', '@60040', 'ADD', '@60044']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#assign , SYMBOL , ; called
semantic_stack :  [9, 20056, '@60036', 60048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:149
#pop , SYMBOL , ; called
semantic_stack :  [9, 20056, '@60036']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:151
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:151
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#scope_finish(f) , KEYWORD , void called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
[(20080, 'mid', 'int', None), (20084, 'leftChild', 'int', None), (20088, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#scope_finish(t) , KEYWORD , void called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
[(20060, 'node', 'int', None), (20064, 'start', 'int', None), (20068, 'end', 'int', None), (20072, 'base', 'array', None), (20076, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#function_return , KEYWORD , void called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , KEYWORD , void called
semantic_stack :  [9, 20056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look void
# DeclarationList matched with void
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look void
# Declaration matched with void
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look void
# DeclarationInitial matched with void
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , void called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with void
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look void
## TypeSpecifier : checking edge void with look void
# void matched with void
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , updateTree called
semantic_stack :  [9, 'void']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (None, 'updateTree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , updateTree called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (20060, 'updateTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (20060, 'updateTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (20060, 'updateTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , node called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(None, 'node', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , node called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , start called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (None, 'start', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , start called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20060, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , end called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (None, 'end', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , end called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20060, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , idx called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (None, 'idx', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , idx called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20060, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , val called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (None, 'val', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , val called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20060, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , base called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (None, 'base', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , base called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20060, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20060, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , , called
semantic_stack :  [9, 20060, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#define_id , ID , tree called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (None, 'tree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#push_id , ID , tree called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20060, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20060, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#pop , SYMBOL , ) called
semantic_stack :  [9, 20060, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', None)]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:153
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:154
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:154
#define_id , ID , mid called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(None, 'mid', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:154
#push_id , ID , mid called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:154
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20060, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:155
#pop , KEYWORD , int called
semantic_stack :  [9, 20060, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:155
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:155
#define_id , ID , leftChild called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (None, 'leftChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:155
#push_id , ID , leftChild called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:155
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20060, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:156
#pop , KEYWORD , int called
semantic_stack :  [9, 20060, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:156
#push_type , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:156
#define_id , ID , rigtChild called
semantic_stack :  [9, 20060, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (None, 'rigtChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:156
#push_id , ID , rigtChild called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:156
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20060, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#pop , KEYWORD , if called
semantic_stack :  [9, 20060, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#push_id , ID , start called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ==
# B matched with ==
#entered node : B
## B : checking edge = with look ==
## B : checking edge [ with look ==
## B : checking edge SimpleExpressionPrime with look ==
# SimpleExpressionPrime matched with ==
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ==
# AdditiveExpressionPrime matched with ==
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ==
# TermPrime matched with ==
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ==
# SignedFactorPrime matched with ==
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ==
# FactorPrime matched with ==
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ==
## FactorPrime : checking edge EPSILON with look ==
# EPSILON matched with ==
## TermPrime : checking edge G with look ==
# G matched with ==
#entered node : G
## G : checking edge * with look ==
## G : checking edge EPSILON with look ==
# EPSILON matched with ==
## AdditiveExpressionPrime : checking edge D with look ==
# D matched with ==
#entered node : D
## D : checking edge Addop with look ==
## D : checking edge EPSILON with look ==
# EPSILON matched with ==
## SimpleExpressionPrime : checking edge C with look ==
# C matched with ==
#entered node : C
## C : checking edge Relop with look ==
# Relop matched with ==
#entered node : Relop
## Relop : checking edge < with look ==
## Relop : checking edge == with look ==
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#push_operand , SYMBOL , == called
semantic_stack :  [9, 20060, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# == matched with ==
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#push_id , ID , end called
semantic_stack :  [9, 20060, 20068, 'EQ']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20060, 20068, 'EQ', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#hold , SYMBOL , { called
semantic_stack :  [9, 20060, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:157
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#push_id , ID , base called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#push_id , ID , idx called
semantic_stack :  [9, 20060, 60000, 1509, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#push_array , SYMBOL , = called
semantic_stack :  [9, 20060, 60000, 1509, 20084, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#push_id , ID , val called
semantic_stack :  [9, 20060, 60000, 1509, '@60004']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, 60000, 1509, '@60004', 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:158
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 60000, 1509, '@60004']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#push_id , ID , tree called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#push_id , ID , node called
semantic_stack :  [9, 20060, 60000, 1509, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#push_array , SYMBOL , = called
semantic_stack :  [9, 20060, 60000, 1509, 20088, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#push_id , ID , val called
semantic_stack :  [9, 20060, 60000, 1509, '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, 60000, 1509, '@60008', 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:159
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 60000, 1509, '@60008']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:160
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:160
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:160
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20060, 60000, 1509]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:160
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_id , ID , mid called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_id , ID , Div called
semantic_stack :  [9, 20060, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#function_input_pass , ID , start called
semantic_stack :  [9, 20060, 20092, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_id , ID , start called
semantic_stack :  [9, 20060, 20092, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20060, 20092, 68, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_id , ID , end called
semantic_stack :  [9, 20060, 20092, 68, 20068, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ,
# VarCallPrime matched with ,
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ,
## VarCallPrime : checking edge VarPrime with look ,
# VarPrime matched with ,
#entered node : VarPrime
## VarPrime : checking edge [ with look ,
## VarPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20060, 20092, 68, 20068, 'ADD', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_num , NUM , 2 called
semantic_stack :  [9, 20060, 20092, 68, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#push_num , NUM , 0 called
semantic_stack :  [9, 20060, 20092, 68, 60004, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20060, 20092, 68, 60004, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, 20092, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:161
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#push_id , ID , leftChild called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#push_num , NUM , 2 called
semantic_stack :  [9, 20060, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20060, 20096, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#push_id , ID , node called
semantic_stack :  [9, 20060, 20096, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20060, 20096, '#2', 'MULT', 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, 20096, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:162
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_id , ID , rigtChild called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_num , NUM , 2 called
semantic_stack :  [9, 20060, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20060, 20100, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_id , ID , node called
semantic_stack :  [9, 20060, 20100, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## G : checking edge G with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#operand_exec , SYMBOL , + called
semantic_stack :  [9, 20060, 20100, '#2', 'MULT', 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20060, 20100, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#push_num , NUM , 1 called
semantic_stack :  [9, 20060, 20100, 60016, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20060, 20100, 60016, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, 20100, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:163
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#push_id , ID , idx called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20060, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#push_id , ID , mid called
semantic_stack :  [9, 20060, 20076, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## Term : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpression : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20060, 20076, 'LT', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#push_num , NUM , 1 called
semantic_stack :  [9, 20060, 20076, 'LT', 20092, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20060, 20076, 'LT', 20092, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20060, 20076, 'LT', 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#hold , SYMBOL , { called
semantic_stack :  [9, 20060, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:164
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20060, 60028, 1595]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , updateTree called
semantic_stack :  [9, 20060, 60028, 1595]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#function_input_pass , ID , leftChild called
semantic_stack :  [9, 20060, 60028, 1595, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , leftChild called
semantic_stack :  [9, 20060, 60028, 1595, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , start called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , mid called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , idx called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , val called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068, 20092, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , base called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068, 20092, 20076, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#push_id , ID , tree called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068, 20092, 20076, 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20060, 60028, 1595, 1488, 20096, 20068, 20092, 20076, 20080, 20084, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:165
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 60028, 1595, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:166
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20060, 60028, 1595]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:166
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20060, 60028, 1595]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:166
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20060, 60028, 1595]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:166
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , updateTree called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#function_input_pass , ID , rigtChild called
semantic_stack :  [9, 20060, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , rigtChild called
semantic_stack :  [9, 20060, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , mid called
semantic_stack :  [9, 20060, 1488, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20060, 1488, 20100, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_num , NUM , 1 called
semantic_stack :  [9, 20060, 1488, 20100, 20092, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20060, 1488, 20100, 20092, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , end called
semantic_stack :  [9, 20060, 1488, 20100, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , idx called
semantic_stack :  [9, 20060, 1488, 20100, 60032, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , val called
semantic_stack :  [9, 20060, 1488, 20100, 60032, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , base called
semantic_stack :  [9, 20060, 1488, 20100, 60032, 20072, 20076, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#push_id , ID , tree called
semantic_stack :  [9, 20060, 1488, 20100, 60032, 20072, 20076, 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20060, 1488, 20100, 60032, 20072, 20076, 20080, 20084, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:167
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#scope_finish(s) , ID , tree called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#backpatch_jump(t) , ID , tree called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , tree called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , node called
semantic_stack :  [9, 20060, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_array , SYMBOL , = called
semantic_stack :  [9, 20060, 20088, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , tree called
semantic_stack :  [9, 20060, '@60032']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , leftChild called
semantic_stack :  [9, 20060, '@60032', 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_array , SYMBOL , + called
semantic_stack :  [9, 20060, '@60032', 20088, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with +
#entered node : H
## H : checking edge = with look +
## H : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## H : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20060, '@60032', '@60036']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , tree called
semantic_stack :  [9, 20060, '@60032', '@60036', 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look [
# VarCallPrime matched with [
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look [
## VarCallPrime : checking edge VarPrime with look [
# VarPrime matched with [
#entered node : VarPrime
## VarPrime : checking edge [ with look [
# [ matched with [
## VarPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_id , ID , rigtChild called
semantic_stack :  [9, 20060, '@60032', '@60036', 'ADD', 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## VarPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#push_array , SYMBOL , ] called
semantic_stack :  [9, 20060, '@60032', '@60036', 'ADD', 20088, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20060, '@60032', '@60036', 'ADD', '@60040']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#assign , SYMBOL , ; called
semantic_stack :  [9, 20060, '@60032', 60044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:169
#pop , SYMBOL , ; called
semantic_stack :  [9, 20060, '@60032']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:171
#scope_finish(s) , SYMBOL , } called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:171
#backpatch_jump(t) , SYMBOL , } called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#scope_finish(f) , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#scope_finish(t) , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
[(20064, 'node', 'int', None), (20068, 'start', 'int', None), (20072, 'end', 'int', None), (20076, 'idx', 'int', None), (20080, 'val', 'int', None), (20084, 'base', 'array', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#function_return , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , KEYWORD , int called
semantic_stack :  [9, 20060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , queryTree called
semantic_stack :  [9, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (None, 'queryTree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , queryTree called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (20064, 'queryTree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (20064, 'queryTree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (20064, 'queryTree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#function_input_start , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with int
#entered node : Params
## Params : checking edge int with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# int matched with int
## Params : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , node called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(None, 'node', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , node called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Params : checking edge ParamPrime with look ,
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Params : checking edge ParamList with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , , called
semantic_stack :  [9, 20064, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , start called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (None, 'start', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , start called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20064, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , , called
semantic_stack :  [9, 20064, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , end called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (None, 'end', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , end called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20064, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , , called
semantic_stack :  [9, 20064, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , l called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (None, 'l', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , l called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20064, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , , called
semantic_stack :  [9, 20064, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , r called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (None, 'r', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , r called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(v) , SYMBOL , , called
semantic_stack :  [9, 20064, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with ,
#entered node : ParamPrime
## ParamPrime : checking edge [ with look ,
## ParamPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , , called
semantic_stack :  [9, 20064, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look ,
# ParamList matched with ,
#entered node : ParamList
## ParamList : checking edge , with look ,
# , matched with ,
## ParamList : checking edge Param with look int
# Param matched with int
#entered node : Param
## Param : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#define_id , ID , tree called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (None, 'tree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#push_id , ID , tree called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Param : checking edge ParamPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20064, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ParamPrime matched with [
#entered node : ParamPrime
## ParamPrime : checking edge [ with look [
# [ matched with [
## ParamPrime : checking edge ] with look ]
# ] matched with ]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#type_to_array , SYMBOL , ] called
semantic_stack :  [9, 20064, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#pop , SYMBOL , ) called
semantic_stack :  [9, 20064, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ParamList : checking edge ParamList with look )
# ParamList matched with )
#entered node : ParamList
## ParamList : checking edge , with look )
## ParamList : checking edge EPSILON with look )
# EPSILON matched with )
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', None)]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:173
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:174
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:174
#define_id , ID , mid called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(None, 'mid', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:174
#push_id , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:174
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:175
#pop , KEYWORD , int called
semantic_stack :  [9, 20064, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:175
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:175
#define_id , ID , leftChild called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (None, 'leftChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:175
#push_id , ID , leftChild called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:175
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:176
#pop , KEYWORD , int called
semantic_stack :  [9, 20064, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:176
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:176
#define_id , ID , rigtChild called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (None, 'rigtChild', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:176
#push_id , ID , rigtChild called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:176
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:177
#pop , KEYWORD , int called
semantic_stack :  [9, 20064, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:177
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:177
#define_id , ID , leftSum called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (None, 'leftSum', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:177
#push_id , ID , leftSum called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:177
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:178
#pop , KEYWORD , int called
semantic_stack :  [9, 20064, 20104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:178
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:178
#define_id , ID , rightSum called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (None, 'rightSum', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:178
#push_id , ID , rightSum called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:178
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:179
#pop , KEYWORD , int called
semantic_stack :  [9, 20064, 20108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:179
#push_type , KEYWORD , int called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:179
#define_id , ID , tmp called
semantic_stack :  [9, 20064, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (None, 'tmp', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:179
#push_id , ID , tmp called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:179
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20064, 20112]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#pop , KEYWORD , if called
semantic_stack :  [9, 20064, 20112]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look if
# DeclarationList matched with if
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look if
## DeclarationList : checking edge EPSILON with look if
# EPSILON matched with if
## CompoundStmt : checking edge StatementList with look if
# StatementList matched with if
#entered node : StatementList
## StatementList : checking edge Statement with look if
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_id , ID , r called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20064, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_id , ID , start called
semantic_stack :  [9, 20064, 20084, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 20084, 'LT', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look (
# Term matched with (
#entered node : Term
## Term : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_id , ID , end called
semantic_stack :  [9, 20064, 60000, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20064, 60000, 'ADD', 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#push_id , ID , l called
semantic_stack :  [9, 20064, 60000, 'ADD', 20076, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 60000, 'ADD', 20076, 'LT', 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Factor : checking edge ) with look )
# ) matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 60000, 'ADD', 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#hold , SYMBOL , { called
semantic_stack :  [9, 20064, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:180
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look NUM
# ReturnStmtPrime matched with NUM
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look NUM
## ReturnStmtPrime : checking edge Expression with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:181
#push_rv , NUM , 0 called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:181
#push_num , NUM , 0 called
semantic_stack :  [9, 20064, 60008, 1841, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:181
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 60008, 1841, 20012, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:181
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 60008, 1841, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:182
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20064, 60008, 1841]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look if
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#scope_start(s) , KEYWORD , if called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with if
#entered node : Statement
## Statement : checking edge ExpressionStmt with look if
## Statement : checking edge CompoundStmt with look if
## Statement : checking edge SelectionStmt with look if
# SelectionStmt matched with if
#entered node : SelectionStmt
## SelectionStmt : checking edge if with look if
# if matched with if
## SelectionStmt : checking edge ( with look (
# ( matched with (
## SelectionStmt : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look (
# Expression matched with (
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look (
# SimpleExpressionZegond matched with (
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look (
# AdditiveExpressionZegond matched with (
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look (
# TermZegond matched with (
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look (
# SignedFactorZegond matched with (
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look (
## SignedFactorZegond : checking edge - with look (
## SignedFactorZegond : checking edge FactorZegond with look (
# FactorZegond matched with (
#entered node : FactorZegond
## FactorZegond : checking edge ( with look (
# ( matched with (
## FactorZegond : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_id , ID , l called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20064, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_id , ID , start called
semantic_stack :  [9, 20064, 20080, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## Term : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpression : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 20080, 'LT', 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_num , NUM , 1 called
semantic_stack :  [9, 20064, 20080, 'LT', 20072, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 20080, 'LT', 20072, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 20080, 'LT', 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20064, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look (
# SignedFactor matched with (
#entered node : SignedFactor
## SignedFactor : checking edge + with look (
## SignedFactor : checking edge - with look (
## SignedFactor : checking edge Factor with look (
# Factor matched with (
#entered node : Factor
## Factor : checking edge ( with look (
# ( matched with (
## Factor : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_id , ID , end called
semantic_stack :  [9, 20064, 60016, 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_id , ID , r called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## Term : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpression : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076, 'LT', 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#push_num , NUM , 1 called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076, 'LT', 20084, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## D : checking edge D with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076, 'LT', 20084, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 60016, 'MULT', 20076, 'LT', 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## Factor : checking edge ) with look )
# ) matched with )
## G : checking edge G with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20064, 60016, 'MULT', 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## FactorZegond : checking edge ) with look )
# ) matched with )
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## SelectionStmt : checking edge ) with look )
# ) matched with )
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#hold , SYMBOL , { called
semantic_stack :  [9, 20064, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:183
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look return
# DeclarationList matched with return
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look return
## DeclarationList : checking edge EPSILON with look return
# EPSILON matched with return
## CompoundStmt : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#push_rv , ID , tree called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#push_id , ID , tree called
semantic_stack :  [9, 20064, 60028, 1850, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#push_id , ID , node called
semantic_stack :  [9, 20064, 60028, 1850, 20012, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#push_array , SYMBOL , ; called
semantic_stack :  [9, 20064, 60028, 1850, 20012, 20088, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with ;
#entered node : H
## H : checking edge = with look ;
## H : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## H : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 60028, 1850, 20012, '@60032']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:184
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 60028, 1850, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:185
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
## SelectionStmt : checking edge else with look else
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:186
#scope_finish(s) , KEYWORD , else called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:186
#jump_placeholder(t) , KEYWORD , else called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:186
#if_decide , KEYWORD , else called
semantic_stack :  [9, 20064, 60028, 1850]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# else matched with else
## SelectionStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:186
#scope_start(s) , SYMBOL , { called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:187
#push_id , ID , tmp called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:187
#push_id , ID , tmp called
semantic_stack :  [9, 20064, 20112]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ;
# B matched with ;
#entered node : B
## B : checking edge = with look ;
## B : checking edge [ with look ;
## B : checking edge SimpleExpressionPrime with look ;
# SimpleExpressionPrime matched with ;
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ;
# AdditiveExpressionPrime matched with ;
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ;
# TermPrime matched with ;
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ;
# SignedFactorPrime matched with ;
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ;
# FactorPrime matched with ;
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ;
## FactorPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:187
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20112, 20112]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:187
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20112]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#scope_finish(s) , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#backpatch_jump(t) , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#scope_finish(s) , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#backpatch_jump(t) , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_id , ID , mid called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_id , ID , Div called
semantic_stack :  [9, 20064, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#function_input_pass , ID , start called
semantic_stack :  [9, 20064, 20092, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_id , ID , start called
semantic_stack :  [9, 20064, 20092, 68]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 20092, 68, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_id , ID , end called
semantic_stack :  [9, 20064, 20092, 68, 20072, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ,
# VarCallPrime matched with ,
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ,
## VarCallPrime : checking edge VarPrime with look ,
# VarPrime matched with ,
#entered node : VarPrime
## VarPrime : checking edge [ with look ,
## VarPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20064, 20092, 68, 20072, 'ADD', 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_num , NUM , 2 called
semantic_stack :  [9, 20064, 20092, 68, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#push_num , NUM , 0 called
semantic_stack :  [9, 20064, 20092, 68, 60012, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20064, 20092, 68, 60012, '#2', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20092, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:189
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#push_id , ID , leftChild called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#push_num , NUM , 2 called
semantic_stack :  [9, 20064, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20064, 20096, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#push_id , ID , node called
semantic_stack :  [9, 20064, 20096, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## G : checking edge G with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20064, 20096, '#2', 'MULT', 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20096, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:190
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_id , ID , rigtChild called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_num , NUM , 2 called
semantic_stack :  [9, 20064, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look *
# G matched with *
#entered node : G
## G : checking edge * with look *
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_operand , SYMBOL , * called
semantic_stack :  [9, 20064, 20100, '#2']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# * matched with *
## G : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_id , ID , node called
semantic_stack :  [9, 20064, 20100, '#2', 'MULT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look +
# VarCallPrime matched with +
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look +
## VarCallPrime : checking edge VarPrime with look +
# VarPrime matched with +
#entered node : VarPrime
## VarPrime : checking edge [ with look +
## VarPrime : checking edge EPSILON with look +
# EPSILON matched with +
## G : checking edge G with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#operand_exec , SYMBOL , + called
semantic_stack :  [9, 20064, 20100, '#2', 'MULT', 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionZegond : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 20100, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#push_num , NUM , 1 called
semantic_stack :  [9, 20064, 20100, 60024, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20064, 20100, 60024, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20100, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:191
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , leftSum called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , queryTree called
semantic_stack :  [9, 20064, 20104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#function_input_pass , ID , leftChild called
semantic_stack :  [9, 20064, 20104, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , leftChild called
semantic_stack :  [9, 20064, 20104, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , start called
semantic_stack :  [9, 20064, 20104, 1817, 20096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , mid called
semantic_stack :  [9, 20064, 20104, 1817, 20096, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , l called
semantic_stack :  [9, 20064, 20104, 1817, 20096, 20072, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , r called
semantic_stack :  [9, 20064, 20104, 1817, 20096, 20072, 20092, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#push_id , ID , tree called
semantic_stack :  [9, 20064, 20104, 1817, 20096, 20072, 20092, 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20064, 20104, 1817, 20096, 20072, 20092, 20080, 20084, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20104, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:192
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , rightSum called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , queryTree called
semantic_stack :  [9, 20064, 20108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#function_input_pass , ID , rigtChild called
semantic_stack :  [9, 20064, 20108, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , rigtChild called
semantic_stack :  [9, 20064, 20108, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , mid called
semantic_stack :  [9, 20064, 20108, 1817, 20100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_num , NUM , 1 called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 20092, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 20092, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , end called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , l called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 60036, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , r called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 60036, 20076, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#push_id , ID , tree called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 60036, 20076, 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20064, 20108, 1817, 20100, 60036, 20076, 20080, 20084, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20108, 60040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:193
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look return
# StatementList matched with return
#entered node : StatementList
## StatementList : checking edge Statement with look return
# Statement matched with return
#entered node : Statement
## Statement : checking edge ExpressionStmt with look return
## Statement : checking edge CompoundStmt with look return
## Statement : checking edge SelectionStmt with look return
## Statement : checking edge IterationStmt with look return
## Statement : checking edge ReturnStmt with look return
# ReturnStmt matched with return
#entered node : ReturnStmt
## ReturnStmt : checking edge return with look return
# return matched with return
## ReturnStmt : checking edge ReturnStmtPrime with look ID
# ReturnStmtPrime matched with ID
#entered node : ReturnStmtPrime
## ReturnStmtPrime : checking edge ; with look ID
## ReturnStmtPrime : checking edge Expression with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#push_rv , ID , leftSum called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#push_id , ID , leftSum called
semantic_stack :  [9, 20064, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20064, 20012, 20104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#push_id , ID , rightSum called
semantic_stack :  [9, 20064, 20012, 20104, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look ;
# VarCallPrime matched with ;
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look ;
## VarCallPrime : checking edge VarPrime with look ;
# VarPrime matched with ;
#entered node : VarPrime
## VarPrime : checking edge [ with look ;
## VarPrime : checking edge EPSILON with look ;
# EPSILON matched with ;
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20064, 20012, 20104, 'ADD', 20108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ReturnStmtPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#assign , SYMBOL , ; called
semantic_stack :  [9, 20064, 20012, 60044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:194
#pop , SYMBOL , ; called
semantic_stack :  [9, 20064, 20012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:195
#jump_placeholder(f) , SYMBOL , } called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#scope_finish(f) , KEYWORD , void called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
[(20092, 'mid', 'int', None), (20096, 'leftChild', 'int', None), (20100, 'rigtChild', 'int', None), (20104, 'leftSum', 'int', None), (20108, 'rightSum', 'int', None), (20112, 'tmp', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#scope_finish(t) , KEYWORD , void called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
[(20068, 'node', 'int', None), (20072, 'start', 'int', None), (20076, 'end', 'int', None), (20080, 'l', 'int', None), (20084, 'r', 'int', None), (20088, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#function_return , KEYWORD , void called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#pop , KEYWORD , void called
semantic_stack :  [9, 20064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look void
# DeclarationList matched with void
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look void
# Declaration matched with void
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look void
# DeclarationInitial matched with void
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#push_type , KEYWORD , void called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array'])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with void
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look void
## TypeSpecifier : checking edge void with look void
# void matched with void
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#define_id , ID , main called
semantic_stack :  [9, 'void']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (None, 'main', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#push_id , ID , main called
semantic_stack :  [9]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (20068, 'main', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look (
# DeclarationPrime matched with (
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#check_void(f) , SYMBOL , ( called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (20068, 'main', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# FunDeclarationPrime matched with (
#entered node : FunDeclarationPrime
## FunDeclarationPrime : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#define_function , SYMBOL , ( called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (20068, 'main', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#main_function , SYMBOL , ( called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#scope_start(t) , SYMBOL , ( called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## FunDeclarationPrime : checking edge Params with look void
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#function_input_start , KEYWORD , void called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Params matched with void
#entered node : Params
## Params : checking edge int with look void
## Params : checking edge void with look void
# void matched with void
## FunDeclarationPrime : checking edge ) with look )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#function_input_finish , SYMBOL , ) called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ) matched with )
## FunDeclarationPrime : checking edge CompoundStmt with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:197
#scope_start(f) , SYMBOL , { called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:198
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:198
#define_id , ID , a called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(None, 'a', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:198
#push_id , ID , a called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:198
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20068, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:199
#pop , KEYWORD , int called
semantic_stack :  [9, 20068, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:199
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:199
#define_id , ID , b called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (None, 'b', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:199
#push_id , ID , b called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:199
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20068, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#pop , KEYWORD , int called
semantic_stack :  [9, 20068, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#define_id , ID , base called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (None, 'base', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#push_id , ID , base called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look [
# DeclarationPrime matched with [
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look [
## DeclarationPrime : checking edge VarDeclarationPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20068, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with [
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look [
## VarDeclarationPrime : checking edge [ with look [
# [ matched with [
## VarDeclarationPrime : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#push_num , NUM , 16 called
semantic_stack :  [9, 20068, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## VarDeclarationPrime : checking edge ] with look ]
# ] matched with ]
## VarDeclarationPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#define_array , SYMBOL , ; called
semantic_stack :  [9, 20068, 20080, '#16']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:200
#type_to_array , SYMBOL , ; called
semantic_stack :  [9, 20068, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#pop , KEYWORD , int called
semantic_stack :  [9, 20068, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#define_id , ID , tree called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (None, 'tree', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#push_id , ID , tree called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look [
# DeclarationPrime matched with [
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look [
## DeclarationPrime : checking edge VarDeclarationPrime with look [
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#check_void(v) , SYMBOL , [ called
semantic_stack :  [9, 20068, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with [
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look [
## VarDeclarationPrime : checking edge [ with look [
# [ matched with [
## VarDeclarationPrime : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#push_num , NUM , 64 called
semantic_stack :  [9, 20068, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## VarDeclarationPrime : checking edge ] with look ]
# ] matched with ]
## VarDeclarationPrime : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#define_array , SYMBOL , ; called
semantic_stack :  [9, 20068, 20084, '#64']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:201
#type_to_array , SYMBOL , ; called
semantic_stack :  [9, 20068, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:202
#pop , KEYWORD , int called
semantic_stack :  [9, 20068, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:202
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:202
#define_id , ID , i called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (None, 'i', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:202
#push_id , ID , i called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:202
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20068, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:203
#pop , KEYWORD , int called
semantic_stack :  [9, 20068, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look int
# DeclarationList matched with int
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look int
# Declaration matched with int
#entered node : Declaration
## Declaration : checking edge DeclarationInitial with look int
# DeclarationInitial matched with int
#entered node : DeclarationInitial
## DeclarationInitial : checking edge TypeSpecifier with look int
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:203
#push_type , KEYWORD , int called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# TypeSpecifier matched with int
#entered node : TypeSpecifier
## TypeSpecifier : checking edge int with look int
# int matched with int
## DeclarationInitial : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:203
#define_id , ID , n called
semantic_stack :  [9, 20068, 'int']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (None, 'n', None, None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:203
#push_id , ID , n called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Declaration : checking edge DeclarationPrime with look ;
# DeclarationPrime matched with ;
#entered node : DeclarationPrime
## DeclarationPrime : checking edge FunDeclarationPrime with look ;
## DeclarationPrime : checking edge VarDeclarationPrime with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:203
#check_void(v) , SYMBOL , ; called
semantic_stack :  [9, 20068, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# VarDeclarationPrime matched with ;
#entered node : VarDeclarationPrime
## VarDeclarationPrime : checking edge ; with look ;
# ; matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:205
#pop , ID , a called
semantic_stack :  [9, 20068, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:205
#push_id , ID , a called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:205
#push_num , NUM , 7 called
semantic_stack :  [9, 20068, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:205
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 20072, '#7']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:205
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:206
#push_id , ID , b called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:206
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:206
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 20076, '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:206
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:207
#push_id , ID , BinaryPrint called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:207
#function_input_pass , ID , a called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:207
#push_id , ID , a called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:207
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:207
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60000]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:208
#push_id , ID , BinaryPrint called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:208
#function_input_pass , ID , b called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:208
#push_id , ID , b called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:208
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:208
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60004]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#push_id , ID , BinaryPrint called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#function_input_pass , ID , Or called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#push_id , ID , Or called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#function_input_pass , ID , a called
semantic_stack :  [9, 20068, 1041, 226]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#push_id , ID , a called
semantic_stack :  [9, 20068, 1041, 226]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#push_id , ID , b called
semantic_stack :  [9, 20068, 1041, 226, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 226, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 60008]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:209
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60012]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#push_id , ID , BinaryPrint called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#function_input_pass , ID , And called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#push_id , ID , And called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#function_input_pass , ID , a called
semantic_stack :  [9, 20068, 1041, 407]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#push_id , ID , a called
semantic_stack :  [9, 20068, 1041, 407]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#push_id , ID , b called
semantic_stack :  [9, 20068, 1041, 407, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 407, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 60016]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:210
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60020]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#push_id , ID , BinaryPrint called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#function_input_pass , ID , Xor called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#push_id , ID , Xor called
semantic_stack :  [9, 20068, 1041]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#function_input_pass , ID , a called
semantic_stack :  [9, 20068, 1041, 588]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#push_id , ID , a called
semantic_stack :  [9, 20068, 1041, 588]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#push_id , ID , b called
semantic_stack :  [9, 20068, 1041, 588, 20072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 588, 20072, 20076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1041, 60024]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:211
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60028]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#push_id , ID , output called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#function_input_pass , ID , Power called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#push_id , ID , Power called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#function_input_pass , NUM , 3 called
semantic_stack :  [9, 20068, 5, 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 5, 661]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 5, 661, '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 661, '#3', '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 60032]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:213
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60036]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#push_id , ID , output called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#function_input_pass , ID , SQRT called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#push_id , ID , SQRT called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#function_input_pass , NUM , 999 called
semantic_stack :  [9, 20068, 5, 894]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#push_num , NUM , 999 called
semantic_stack :  [9, 20068, 5, 894]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 5, 894, '#999']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionZegond : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionZegond : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 894, '#999', '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 60040]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:214
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60044]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:216
#push_id , ID , n called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:216
#push_num , NUM , 16 called
semantic_stack :  [9, 20068, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:216
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 20092, '#16']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:216
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:218
#push_id , ID , i called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:218
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionZegond : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionZegond : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:218
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 20088, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:218
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look while
# StatementList matched with while
#entered node : StatementList
## StatementList : checking edge Statement with look while
# Statement matched with while
#entered node : Statement
## Statement : checking edge ExpressionStmt with look while
## Statement : checking edge CompoundStmt with look while
## Statement : checking edge SelectionStmt with look while
## Statement : checking edge IterationStmt with look while
# IterationStmt matched with while
#entered node : IterationStmt
## IterationStmt : checking edge while with look while
# while matched with while
## IterationStmt : checking edge ( with look (
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#label , SYMBOL , ( called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ( matched with (
## IterationStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#push_id , ID , i called
semantic_stack :  [9, 20068, 2965]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look <
# B matched with <
#entered node : B
## B : checking edge = with look <
## B : checking edge [ with look <
## B : checking edge SimpleExpressionPrime with look <
# SimpleExpressionPrime matched with <
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look <
# AdditiveExpressionPrime matched with <
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look <
# TermPrime matched with <
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look <
# SignedFactorPrime matched with <
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look <
# FactorPrime matched with <
#entered node : FactorPrime
## FactorPrime : checking edge ( with look <
## FactorPrime : checking edge EPSILON with look <
# EPSILON matched with <
## TermPrime : checking edge G with look <
# G matched with <
#entered node : G
## G : checking edge * with look <
## G : checking edge EPSILON with look <
# EPSILON matched with <
## AdditiveExpressionPrime : checking edge D with look <
# D matched with <
#entered node : D
## D : checking edge Addop with look <
## D : checking edge EPSILON with look <
# EPSILON matched with <
## SimpleExpressionPrime : checking edge C with look <
# C matched with <
#entered node : C
## C : checking edge Relop with look <
# Relop matched with <
#entered node : Relop
## Relop : checking edge < with look <
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#push_operand , SYMBOL , < called
semantic_stack :  [9, 20068, 2965, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# < matched with <
## C : checking edge AdditiveExpression with look ID
# AdditiveExpression matched with ID
#entered node : AdditiveExpression
## AdditiveExpression : checking edge Term with look ID
# Term matched with ID
#entered node : Term
## Term : checking edge SignedFactor with look ID
# SignedFactor matched with ID
#entered node : SignedFactor
## SignedFactor : checking edge + with look ID
## SignedFactor : checking edge - with look ID
## SignedFactor : checking edge Factor with look ID
# Factor matched with ID
#entered node : Factor
## Factor : checking edge ( with look ID
## Factor : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#push_id , ID , n called
semantic_stack :  [9, 20068, 2965, 20088, 'LT']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Factor : checking edge VarCallPrime with look )
# VarCallPrime matched with )
#entered node : VarCallPrime
## VarCallPrime : checking edge ( with look )
## VarCallPrime : checking edge VarPrime with look )
# VarPrime matched with )
#entered node : VarPrime
## VarPrime : checking edge [ with look )
## VarPrime : checking edge EPSILON with look )
# EPSILON matched with )
## Term : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpression : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#operand_exec , SYMBOL , ) called
semantic_stack :  [9, 20068, 2965, 20088, 'LT', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## IterationStmt : checking edge ) with look )
# ) matched with )
## IterationStmt : checking edge Statement with look {
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#hold , SYMBOL , { called
semantic_stack :  [9, 20068, 2965, 60048]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:219
#scope_start(c) , SYMBOL , { called
semantic_stack :  [9, 20068, 2965, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Statement matched with {
#entered node : Statement
## Statement : checking edge ExpressionStmt with look {
## Statement : checking edge CompoundStmt with look {
# CompoundStmt matched with {
#entered node : CompoundStmt
## CompoundStmt : checking edge { with look {
# { matched with {
## CompoundStmt : checking edge DeclarationList with look ID
# DeclarationList matched with ID
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look ID
## DeclarationList : checking edge EPSILON with look ID
# EPSILON matched with ID
## CompoundStmt : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_id , ID , base called
semantic_stack :  [9, 20068, 2965, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look [
# B matched with [
#entered node : B
## B : checking edge = with look [
## B : checking edge [ with look [
# [ matched with [
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_id , ID , i called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ]
# B matched with ]
#entered node : B
## B : checking edge = with look ]
## B : checking edge [ with look ]
## B : checking edge SimpleExpressionPrime with look ]
# SimpleExpressionPrime matched with ]
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ]
# AdditiveExpressionPrime matched with ]
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ]
# TermPrime matched with ]
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ]
# SignedFactorPrime matched with ]
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ]
# FactorPrime matched with ]
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ]
## FactorPrime : checking edge EPSILON with look ]
# EPSILON matched with ]
## TermPrime : checking edge G with look ]
# G matched with ]
#entered node : G
## G : checking edge * with look ]
## G : checking edge EPSILON with look ]
# EPSILON matched with ]
## AdditiveExpressionPrime : checking edge D with look ]
# D matched with ]
#entered node : D
## D : checking edge Addop with look ]
## D : checking edge EPSILON with look ]
# EPSILON matched with ]
## SimpleExpressionPrime : checking edge C with look ]
# C matched with ]
#entered node : C
## C : checking edge Relop with look ]
## C : checking edge EPSILON with look ]
# EPSILON matched with ]
## B : checking edge ] with look ]
# ] matched with ]
## B : checking edge H with look =
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_array , SYMBOL , = called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20080, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# H matched with =
#entered node : H
## H : checking edge = with look =
# = matched with =
## H : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_id , ID , i called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052', 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052', 20088, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052', 20088, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052', 60056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:220
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, '@60052']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#push_id , ID , i called
semantic_stack :  [9, 20068, 2965, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look =
# B matched with =
#entered node : B
## B : checking edge = with look =
# = matched with =
## B : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#push_id , ID , i called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look +
# B matched with +
#entered node : B
## B : checking edge = with look +
## B : checking edge [ with look +
## B : checking edge SimpleExpressionPrime with look +
# SimpleExpressionPrime matched with +
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look +
# AdditiveExpressionPrime matched with +
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look +
# TermPrime matched with +
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look +
# SignedFactorPrime matched with +
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look +
# FactorPrime matched with +
#entered node : FactorPrime
## FactorPrime : checking edge ( with look +
## FactorPrime : checking edge EPSILON with look +
# EPSILON matched with +
## TermPrime : checking edge G with look +
# G matched with +
#entered node : G
## G : checking edge * with look +
## G : checking edge EPSILON with look +
# EPSILON matched with +
## AdditiveExpressionPrime : checking edge D with look +
# D matched with +
#entered node : D
## D : checking edge Addop with look +
# Addop matched with +
#entered node : Addop
## Addop : checking edge + with look +
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#push_operand , SYMBOL , + called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# + matched with +
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088, 20088, 'ADD']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## D : checking edge D with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#operand_exec , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088, 20088, 'ADD', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#assign , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088, 60060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:221
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 2965, 60048, 2966, 20088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#while_jump , ID , buildTree called
semantic_stack :  [9, 20068, 2965, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#scope_finish(c) , ID , buildTree called
semantic_stack :  [9, 20068, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#if_decide , ID , buildTree called
semantic_stack :  [9, 20068, 60048, 2966]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_id , ID , buildTree called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#function_input_pass , NUM , 1 called
semantic_stack :  [9, 20068, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 1212]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 1212, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_id , ID , n called
semantic_stack :  [9, 20068, 1212, '#1', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_id , ID , base called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 60052]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#push_id , ID , tree called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 60052, 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1212, '#1', '#0', 60052, 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:224
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60056]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_id , ID , output called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#function_input_pass , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_id , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#function_input_pass , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_id , ID , n called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_id , ID , n called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#push_id , ID , tree called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0', 60064]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60060, '#0', 60064, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 60068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:226
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60072]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_id , ID , updateTree called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#function_input_pass , NUM , 1 called
semantic_stack :  [9, 20068, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 1488]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 1488, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_id , ID , n called
semantic_stack :  [9, 20068, 1488, '#1', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 60076]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_num , NUM , 10 called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 60076, '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_id , ID , base called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 60076, '#3', '#10']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look ,
# B matched with ,
#entered node : B
## B : checking edge = with look ,
## B : checking edge [ with look ,
## B : checking edge SimpleExpressionPrime with look ,
# SimpleExpressionPrime matched with ,
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look ,
# AdditiveExpressionPrime matched with ,
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look ,
# TermPrime matched with ,
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look ,
# SignedFactorPrime matched with ,
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look ,
# FactorPrime matched with ,
#entered node : FactorPrime
## FactorPrime : checking edge ( with look ,
## FactorPrime : checking edge EPSILON with look ,
# EPSILON matched with ,
## TermPrime : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionPrime : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#push_id , ID , tree called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 60076, '#3', '#10', 20080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 1488, '#1', '#0', 60076, '#3', '#10', 20080, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:228
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60080]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_id , ID , output called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#function_input_pass , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_id , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#function_input_pass , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_id , ID , n called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_id , ID , n called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#push_id , ID , tree called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0', 60088]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60084, '#0', 60088, 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 60092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:230
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60096]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look ID
# StatementList matched with ID
#entered node : StatementList
## StatementList : checking edge Statement with look ID
# Statement matched with ID
#entered node : Statement
## Statement : checking edge ExpressionStmt with look ID
# ExpressionStmt matched with ID
#entered node : ExpressionStmt
## ExpressionStmt : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_id , ID , output called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#function_input_pass , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with ID
#entered node : Args
## Args : checking edge ArgList with look ID
# ArgList matched with ID
#entered node : ArgList
## ArgList : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_id , ID , queryTree called
semantic_stack :  [9, 20068, 5]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look (
# B matched with (
#entered node : B
## B : checking edge = with look (
## B : checking edge [ with look (
## B : checking edge SimpleExpressionPrime with look (
# SimpleExpressionPrime matched with (
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look (
# AdditiveExpressionPrime matched with (
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look (
# TermPrime matched with (
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look (
# SignedFactorPrime matched with (
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look (
# FactorPrime matched with (
#entered node : FactorPrime
## FactorPrime : checking edge ( with look (
# ( matched with (
## FactorPrime : checking edge Args with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#function_input_pass , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# Args matched with NUM
#entered node : Args
## Args : checking edge ArgList with look NUM
# ArgList matched with NUM
#entered node : ArgList
## ArgList : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgList : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_id , ID , n called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look -
# B matched with -
#entered node : B
## B : checking edge = with look -
## B : checking edge [ with look -
## B : checking edge SimpleExpressionPrime with look -
# SimpleExpressionPrime matched with -
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look -
# AdditiveExpressionPrime matched with -
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look -
# TermPrime matched with -
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look -
# SignedFactorPrime matched with -
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look -
# FactorPrime matched with -
#entered node : FactorPrime
## FactorPrime : checking edge ( with look -
## FactorPrime : checking edge EPSILON with look -
# EPSILON matched with -
## TermPrime : checking edge G with look -
# G matched with -
#entered node : G
## G : checking edge * with look -
## G : checking edge EPSILON with look -
# EPSILON matched with -
## AdditiveExpressionPrime : checking edge D with look -
# D matched with -
#entered node : D
## D : checking edge Addop with look -
# Addop matched with -
#entered node : Addop
## Addop : checking edge + with look -
## Addop : checking edge - with look -
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_operand , SYMBOL , - called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# - matched with -
## D : checking edge Term with look NUM
# Term matched with NUM
#entered node : Term
## Term : checking edge SignedFactor with look NUM
# SignedFactor matched with NUM
#entered node : SignedFactor
## SignedFactor : checking edge + with look NUM
## SignedFactor : checking edge - with look NUM
## SignedFactor : checking edge Factor with look NUM
# Factor matched with NUM
#entered node : Factor
## Factor : checking edge ( with look NUM
## Factor : checking edge ID with look NUM
## Factor : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_num , NUM , 1 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## Term : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## D : checking edge D with look ,
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#operand_exec , SYMBOL , , called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 20092, 'SUB', '#1']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionPrime : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_num , NUM , 0 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60100]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look NUM
# Expression matched with NUM
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look NUM
# SimpleExpressionZegond matched with NUM
#entered node : SimpleExpressionZegond
## SimpleExpressionZegond : checking edge AdditiveExpressionZegond with look NUM
# AdditiveExpressionZegond matched with NUM
#entered node : AdditiveExpressionZegond
## AdditiveExpressionZegond : checking edge TermZegond with look NUM
# TermZegond matched with NUM
#entered node : TermZegond
## TermZegond : checking edge SignedFactorZegond with look NUM
# SignedFactorZegond matched with NUM
#entered node : SignedFactorZegond
## SignedFactorZegond : checking edge + with look NUM
## SignedFactorZegond : checking edge - with look NUM
## SignedFactorZegond : checking edge FactorZegond with look NUM
# FactorZegond matched with NUM
#entered node : FactorZegond
## FactorZegond : checking edge ( with look NUM
## FactorZegond : checking edge NUM with look NUM
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_num , NUM , 3 called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60100, '#0']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# NUM matched with NUM
## TermZegond : checking edge G with look ,
# G matched with ,
#entered node : G
## G : checking edge * with look ,
## G : checking edge EPSILON with look ,
# EPSILON matched with ,
## AdditiveExpressionZegond : checking edge D with look ,
# D matched with ,
#entered node : D
## D : checking edge Addop with look ,
## D : checking edge EPSILON with look ,
# EPSILON matched with ,
## SimpleExpressionZegond : checking edge C with look ,
# C matched with ,
#entered node : C
## C : checking edge Relop with look ,
## C : checking edge EPSILON with look ,
# EPSILON matched with ,
## ArgListPrime : checking edge ArgListPrime with look ,
# ArgListPrime matched with ,
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look ,
# , matched with ,
## ArgListPrime : checking edge Expression with look ID
# Expression matched with ID
#entered node : Expression
## Expression : checking edge SimpleExpressionZegond with look ID
## Expression : checking edge ID with look ID
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#push_id , ID , tree called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60100, '#0', '#3']
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ID matched with ID
## Expression : checking edge B with look )
# B matched with )
#entered node : B
## B : checking edge = with look )
## B : checking edge [ with look )
## B : checking edge SimpleExpressionPrime with look )
# SimpleExpressionPrime matched with )
#entered node : SimpleExpressionPrime
## SimpleExpressionPrime : checking edge AdditiveExpressionPrime with look )
# AdditiveExpressionPrime matched with )
#entered node : AdditiveExpressionPrime
## AdditiveExpressionPrime : checking edge TermPrime with look )
# TermPrime matched with )
#entered node : TermPrime
## TermPrime : checking edge SignedFactorPrime with look )
# SignedFactorPrime matched with )
#entered node : SignedFactorPrime
## SignedFactorPrime : checking edge FactorPrime with look )
# FactorPrime matched with )
#entered node : FactorPrime
## FactorPrime : checking edge ( with look )
## FactorPrime : checking edge EPSILON with look )
# EPSILON matched with )
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgListPrime : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 1817, '#1', '#0', 60100, '#0', '#3', 20084]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look )
# G matched with )
#entered node : G
## G : checking edge * with look )
## G : checking edge EPSILON with look )
# EPSILON matched with )
## AdditiveExpressionPrime : checking edge D with look )
# D matched with )
#entered node : D
## D : checking edge Addop with look )
## D : checking edge EPSILON with look )
# EPSILON matched with )
## SimpleExpressionPrime : checking edge C with look )
# C matched with )
#entered node : C
## C : checking edge Relop with look )
## C : checking edge EPSILON with look )
# EPSILON matched with )
## ArgList : checking edge ArgListPrime with look )
# ArgListPrime matched with )
#entered node : ArgListPrime
## ArgListPrime : checking edge , with look )
## ArgListPrime : checking edge EPSILON with look )
# EPSILON matched with )
## FactorPrime : checking edge ) with look )
# ) matched with )
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#function_call , SYMBOL , ) called
semantic_stack :  [9, 20068, 5, 60104]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## TermPrime : checking edge G with look ;
# G matched with ;
#entered node : G
## G : checking edge * with look ;
## G : checking edge EPSILON with look ;
# EPSILON matched with ;
## AdditiveExpressionPrime : checking edge D with look ;
# D matched with ;
#entered node : D
## D : checking edge Addop with look ;
## D : checking edge EPSILON with look ;
# EPSILON matched with ;
## SimpleExpressionPrime : checking edge C with look ;
# C matched with ;
#entered node : C
## C : checking edge Relop with look ;
## C : checking edge EPSILON with look ;
# EPSILON matched with ;
## ExpressionStmt : checking edge ; with look ;
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:232
#pop , SYMBOL , ; called
semantic_stack :  [9, 20068, 60108]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
# ; matched with ;
## StatementList : checking edge StatementList with look }
# StatementList matched with }
#entered node : StatementList
## StatementList : checking edge Statement with look }
## StatementList : checking edge EPSILON with look }
# EPSILON matched with }
## CompoundStmt : checking edge } with look }
# } matched with }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:233
#scope_finish(f) , $ , $ called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
[(20072, 'a', 'int', None), (20076, 'b', 'int', None), (20080, 'base', 'array', None), (20084, 'tree', 'array', None), (20088, 'i', 'int', None), (20092, 'n', 'int', None)]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:233
#scope_finish(t) , $ , $ called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
[]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:233
#function_return , $ , $ called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Start:233
#pop , $ , $ called
semantic_stack :  [9, 20068]
scopes : 
[(5, 'output', 'void', ['int']), (10, 'printArray', 'void', ['array', 'int']), (68, 'Div', 'int', ['int', 'int', 'int']), (181, 'Mod', 'int', ['int', 'int']), (226, 'Or', 'int', ['int', 'int']), (407, 'And', 'int', ['int', 'int']), (588, 'Xor', 'int', ['int', 'int']), (661, 'Power', 'int', ['int', 'int']), (894, 'SQRT', 'int', ['int', 'int']), (1041, 'BinaryPrint', 'void', ['int']), (1212, 'buildTree', 'void', ['int', 'int', 'int', 'array', 'array']), (1488, 'updateTree', 'void', ['int', 'int', 'int', 'int', 'int', 'array', 'array']), (1817, 'queryTree', 'int', ['int', 'int', 'int', 'int', 'int', 'array']), (2182, 'main', 'void', [])]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End
## DeclarationList : checking edge DeclarationList with look $
# DeclarationList matched with $
#entered node : DeclarationList
## DeclarationList : checking edge Declaration with look $
## DeclarationList : checking edge EPSILON with look $
# EPSILON matched with $
## Program : checking edge $ with look $
# $ matched with $
