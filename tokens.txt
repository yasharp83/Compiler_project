1.	 (KEYWORD, void) (ID, printArray) (SYMBOL, () (KEYWORD, int) (ID, A) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, ,) (KEYWORD, int) (ID, n) (SYMBOL, )) (SYMBOL, {)
2.	 (KEYWORD, int) (ID, i) (SYMBOL, ;)
3.	 (ID, i) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
4.	 (KEYWORD, while) (SYMBOL, () (ID, i) (SYMBOL, <) (ID, n) (SYMBOL, )) (SYMBOL, {)
5.	 (ID, output) (SYMBOL, () (ID, A) (SYMBOL, [) (ID, i) (SYMBOL, ]) (SYMBOL, )) (SYMBOL, ;)
6.	 (ID, i) (SYMBOL, =) (ID, i) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
7.	 (SYMBOL, })
8.	 (SYMBOL, })
10.	 (KEYWORD, int) (ID, Div) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, ,) (KEYWORD, int) (ID, q) (SYMBOL, )) (SYMBOL, {)
11.	 (KEYWORD, int) (ID, biggestPow2) (SYMBOL, ;)
12.	 (KEYWORD, if) (SYMBOL, () (ID, b) (SYMBOL, ==) (NUM, 0) (SYMBOL, )) (SYMBOL, {)
13.	 (KEYWORD, return) (NUM, 0) (SYMBOL, ;)
14.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
15.	 (KEYWORD, if) (SYMBOL, () (ID, a) (SYMBOL, <) (ID, b) (SYMBOL, )) (SYMBOL, {)
16.	 (KEYWORD, return) (ID, q) (SYMBOL, ;)
17.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
18.	 (ID, biggestPow2) (SYMBOL, =) (NUM, 1) (SYMBOL, ;)
19.	 (KEYWORD, while) (SYMBOL, () (ID, biggestPow2) (SYMBOL, *) (ID, b) (SYMBOL, *) (NUM, 2) (SYMBOL, <) (ID, a) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, {)
20.	 (ID, biggestPow2) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, biggestPow2) (SYMBOL, ;)
21.	 (SYMBOL, })
22.	 (ID, q) (SYMBOL, =) (ID, q) (SYMBOL, +) (ID, biggestPow2) (SYMBOL, ;)
23.	 (KEYWORD, return) (ID, Div) (SYMBOL, () (ID, a) (SYMBOL, -) (ID, biggestPow2) (SYMBOL, *) (ID, b) (SYMBOL, ,) (ID, b) (SYMBOL, ,) (ID, q) (SYMBOL, )) (SYMBOL, ;)
24.	 (SYMBOL, })
25.	 (SYMBOL, })
26.	 (SYMBOL, })
28.	 (KEYWORD, int) (ID, Mod) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
29.	 (KEYWORD, return) (ID, a) (SYMBOL, -) (ID, b) (SYMBOL, *) (ID, Div) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
30.	 (SYMBOL, })
32.	 (KEYWORD, int) (ID, Or) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
33.	 (KEYWORD, int) (ID, tmp1) (SYMBOL, ;)
34.	 (KEYWORD, int) (ID, tmp2) (SYMBOL, ;)
35.	 (KEYWORD, int) (ID, msk) (SYMBOL, ;)
36.	 (KEYWORD, int) (ID, ans) (SYMBOL, ;)
37.	 (ID, msk) (SYMBOL, =) (NUM, 1) (SYMBOL, ;)
38.	 (ID, ans) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
39.	 (KEYWORD, while) (SYMBOL, () (NUM, 1) (SYMBOL, )) (SYMBOL, {)
40.	 (KEYWORD, if) (SYMBOL, () (SYMBOL, () (SYMBOL, () (ID, a) (SYMBOL, <) (ID, msk) (SYMBOL, )) (SYMBOL, +) (SYMBOL, () (ID, b) (SYMBOL, <) (ID, msk) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ==) (NUM, 2) (SYMBOL, )) (SYMBOL, {)
41.	 (KEYWORD, break) (SYMBOL, ;)
42.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
43.	 (ID, tmp1) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
44.	 (ID, tmp2) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, b) (SYMBOL, ,) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
45.	 (ID, tmp1) (SYMBOL, =) (SYMBOL, () (ID, msk) (SYMBOL, <) (SYMBOL, () (ID, tmp1) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
46.	 (ID, tmp2) (SYMBOL, =) (SYMBOL, () (ID, msk) (SYMBOL, <) (SYMBOL, () (ID, tmp2) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
47.	 (ID, tmp1) (SYMBOL, =) (SYMBOL, () (NUM, 0) (SYMBOL, <) (SYMBOL, () (ID, tmp1) (SYMBOL, +) (ID, tmp2) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
48.	 (ID, ans) (SYMBOL, =) (ID, ans) (SYMBOL, +) (ID, tmp1) (SYMBOL, *) (ID, msk) (SYMBOL, ;)
49.	 (SYMBOL, })
50.	 (ID, msk) (SYMBOL, =) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, ;)
51.	 (SYMBOL, })
52.	 (KEYWORD, return) (ID, ans) (SYMBOL, ;)
53.	 (SYMBOL, })
55.	 (KEYWORD, int) (ID, And) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
56.	 (KEYWORD, int) (ID, tmp1) (SYMBOL, ;)
57.	 (KEYWORD, int) (ID, tmp2) (SYMBOL, ;)
58.	 (KEYWORD, int) (ID, msk) (SYMBOL, ;)
59.	 (KEYWORD, int) (ID, ans) (SYMBOL, ;)
60.	 (ID, msk) (SYMBOL, =) (NUM, 1) (SYMBOL, ;)
61.	 (ID, ans) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
62.	 (KEYWORD, while) (SYMBOL, () (NUM, 1) (SYMBOL, )) (SYMBOL, {)
63.	 (KEYWORD, if) (SYMBOL, () (SYMBOL, () (SYMBOL, () (ID, a) (SYMBOL, <) (ID, msk) (SYMBOL, )) (SYMBOL, +) (SYMBOL, () (ID, b) (SYMBOL, <) (ID, msk) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ==) (NUM, 2) (SYMBOL, )) (SYMBOL, {)
64.	 (KEYWORD, break) (SYMBOL, ;)
65.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
66.	 (ID, tmp1) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
67.	 (ID, tmp2) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, b) (SYMBOL, ,) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
68.	 (ID, tmp1) (SYMBOL, =) (SYMBOL, () (ID, msk) (SYMBOL, <) (SYMBOL, () (ID, tmp1) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
69.	 (ID, tmp2) (SYMBOL, =) (SYMBOL, () (ID, msk) (SYMBOL, <) (SYMBOL, () (ID, tmp2) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
70.	 (ID, tmp1) (SYMBOL, =) (SYMBOL, () (SYMBOL, () (ID, tmp1) (SYMBOL, +) (ID, tmp2) (SYMBOL, )) (SYMBOL, ==) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
71.	 (ID, ans) (SYMBOL, =) (ID, ans) (SYMBOL, +) (ID, tmp1) (SYMBOL, *) (ID, msk) (SYMBOL, ;)
72.	 (SYMBOL, })
73.	 (ID, msk) (SYMBOL, =) (ID, msk) (SYMBOL, *) (NUM, 2) (SYMBOL, ;)
74.	 (SYMBOL, })
75.	 (KEYWORD, return) (ID, ans) (SYMBOL, ;)
76.	 (SYMBOL, })
78.	 (KEYWORD, int) (ID, Xor) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
79.	 (KEYWORD, return) (ID, Or) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, -) (ID, And) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, ;)
80.	 (SYMBOL, })
82.	 (KEYWORD, int) (ID, Power) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
83.	 (KEYWORD, int) (ID, tmp1) (SYMBOL, ;)
84.	 (KEYWORD, int) (ID, tmp2) (SYMBOL, ;)
85.	 (KEYWORD, if) (SYMBOL, () (ID, b) (SYMBOL, ==) (NUM, 0) (SYMBOL, )) (SYMBOL, {)
86.	 (KEYWORD, return) (NUM, 1) (SYMBOL, ;)
87.	 (SYMBOL, }) (KEYWORD, else) (KEYWORD, if) (SYMBOL, () (ID, b) (SYMBOL, ==) (NUM, 1) (SYMBOL, )) (SYMBOL, {)
88.	 (KEYWORD, return) (ID, a) (SYMBOL, ;)
89.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
90.	 (ID, tmp1) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, b) (SYMBOL, ,) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
91.	 (ID, tmp2) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, b) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
92.	 (ID, tmp2) (SYMBOL, =) (ID, Power) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, tmp2) (SYMBOL, )) (SYMBOL, ;)
93.	 (KEYWORD, return) (ID, tmp2) (SYMBOL, *) (ID, tmp2) (SYMBOL, *) (ID, Power) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, tmp1) (SYMBOL, )) (SYMBOL, ;)
94.	 (SYMBOL, })
95.	 (SYMBOL, })
97.	 (KEYWORD, int) (ID, SQRT) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, ,) (KEYWORD, int) (ID, b) (SYMBOL, )) (SYMBOL, {)
98.	 (KEYWORD, int) (ID, l) (SYMBOL, ;)
99.	 (KEYWORD, int) (ID, r) (SYMBOL, ;)
100.	 (KEYWORD, int) (ID, mid) (SYMBOL, ;)
101.	 (ID, l) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
102.	 (ID, r) (SYMBOL, =) (ID, a) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
103.	 (KEYWORD, while) (SYMBOL, () (NUM, 1) (SYMBOL, <) (ID, r) (SYMBOL, -) (ID, l) (SYMBOL, )) (SYMBOL, {)
104.	 (ID, mid) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, r) (SYMBOL, +) (ID, l) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
105.	 (KEYWORD, if) (SYMBOL, () (ID, a) (SYMBOL, <) (ID, Power) (SYMBOL, () (ID, mid) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, )) (SYMBOL, {)
106.	 (ID, r) (SYMBOL, =) (ID, mid) (SYMBOL, ;)
107.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
108.	 (ID, l) (SYMBOL, =) (ID, mid) (SYMBOL, ;)
109.	 (SYMBOL, })
110.	 (SYMBOL, })
111.	 (KEYWORD, return) (ID, l) (SYMBOL, ;)
112.	 (SYMBOL, })
114.	 (KEYWORD, void) (ID, BinaryPrint) (SYMBOL, () (KEYWORD, int) (ID, a) (SYMBOL, )) (SYMBOL, {)
115.	 (KEYWORD, int) (ID, Length) (SYMBOL, ;)
116.	 (KEYWORD, int) (ID, Ar) (SYMBOL, [) (NUM, 1024) (SYMBOL, ]) (SYMBOL, ;)
117.	 (KEYWORD, int) (ID, i) (SYMBOL, ;)
118.	 (KEYWORD, int) (ID, tmp) (SYMBOL, ;)
119.	 (KEYWORD, int) (ID, ans) (SYMBOL, ;)
120.	 (ID, Length) (SYMBOL, =) (NUM, 16) (SYMBOL, ;)
121.	 (ID, i) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
122.	 (ID, ans) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
123.	 (KEYWORD, while) (SYMBOL, () (ID, a) (NUM, 0) (SYMBOL, )) (SYMBOL, {)
124.	 (ID, tmp) (SYMBOL, =) (ID, Mod) (SYMBOL, () (ID, a) (SYMBOL, ,) (NUM, 2) (SYMBOL, )) (SYMBOL, ;)
125.	 (ID, a) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, a) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
126.	 (ID, Ar) (SYMBOL, [) (ID, i) (SYMBOL, ]) (SYMBOL, =) (ID, tmp) (SYMBOL, ;)
127.	 (ID, i) (SYMBOL, =) (ID, i) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
128.	 (SYMBOL, })
129.	 (KEYWORD, while) (SYMBOL, () (ID, i) (NUM, 0) (SYMBOL, )) (SYMBOL, {)
130.	 (ID, i) (SYMBOL, =) (ID, i) (SYMBOL, -) (NUM, 1) (SYMBOL, ;)
131.	 (ID, ans) (SYMBOL, =) (ID, ans) (SYMBOL, *) (NUM, 10) (SYMBOL, +) (ID, Ar) (SYMBOL, [) (ID, i) (SYMBOL, ]) (SYMBOL, ;)
132.	 (SYMBOL, })
133.	 (ID, output) (SYMBOL, () (ID, ans) (SYMBOL, )) (SYMBOL, ;)
134.	 (SYMBOL, })
137.	 (KEYWORD, void) (ID, buildTree) (SYMBOL, () (KEYWORD, int) (ID, node) (SYMBOL, ,) (KEYWORD, int) (ID, start) (SYMBOL, ,) (KEYWORD, int) (ID, end) (SYMBOL, ,) (KEYWORD, int) (ID, base) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, ,) (KEYWORD, int) (ID, tree) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, )) (SYMBOL, {)
138.	 (KEYWORD, int) (ID, mid) (SYMBOL, ;)
139.	 (KEYWORD, int) (ID, leftChild) (SYMBOL, ;)
140.	 (KEYWORD, int) (ID, rigtChild) (SYMBOL, ;)
141.	 (KEYWORD, if) (SYMBOL, () (ID, start) (SYMBOL, ==) (ID, end) (SYMBOL, )) (SYMBOL, {)
142.	 (ID, tree) (SYMBOL, [) (ID, node) (SYMBOL, ]) (SYMBOL, =) (ID, base) (SYMBOL, [) (ID, start) (SYMBOL, ]) (SYMBOL, ;)
143.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
144.	 (ID, mid) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, start) (SYMBOL, +) (ID, end) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
145.	 (ID, leftChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, ;)
146.	 (ID, rigtChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
147.	 (ID, buildTree) (SYMBOL, () (ID, leftChild) (SYMBOL, ,) (ID, start) (SYMBOL, ,) (ID, mid) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
148.	 (ID, buildTree) (SYMBOL, () (ID, rigtChild) (SYMBOL, ,) (ID, mid) (SYMBOL, +) (NUM, 1) (SYMBOL, ,) (ID, end) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
149.	 (ID, tree) (SYMBOL, [) (ID, node) (SYMBOL, ]) (SYMBOL, =) (ID, tree) (SYMBOL, [) (ID, leftChild) (SYMBOL, ]) (SYMBOL, +) (ID, tree) (SYMBOL, [) (ID, rigtChild) (SYMBOL, ]) (SYMBOL, ;)
150.	 (SYMBOL, })
151.	 (SYMBOL, })
153.	 (KEYWORD, void) (ID, updateTree) (SYMBOL, () (KEYWORD, int) (ID, node) (SYMBOL, ,) (KEYWORD, int) (ID, start) (SYMBOL, ,) (KEYWORD, int) (ID, end) (SYMBOL, ,) (KEYWORD, int) (ID, idx) (SYMBOL, ,) (KEYWORD, int) (ID, val) (SYMBOL, ,) (KEYWORD, int) (ID, base) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, ,) (KEYWORD, int) (ID, tree) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, )) (SYMBOL, {)
154.	 (KEYWORD, int) (ID, mid) (SYMBOL, ;)
155.	 (KEYWORD, int) (ID, leftChild) (SYMBOL, ;)
156.	 (KEYWORD, int) (ID, rigtChild) (SYMBOL, ;)
157.	 (KEYWORD, if) (SYMBOL, () (ID, start) (SYMBOL, ==) (ID, end) (SYMBOL, )) (SYMBOL, {)
158.	 (ID, base) (SYMBOL, [) (ID, idx) (SYMBOL, ]) (SYMBOL, =) (ID, val) (SYMBOL, ;)
159.	 (ID, tree) (SYMBOL, [) (ID, node) (SYMBOL, ]) (SYMBOL, =) (ID, val) (SYMBOL, ;)
160.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
161.	 (ID, mid) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, start) (SYMBOL, +) (ID, end) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
162.	 (ID, leftChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, ;)
163.	 (ID, rigtChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
164.	 (KEYWORD, if) (SYMBOL, () (ID, idx) (SYMBOL, <) (ID, mid) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, {)
165.	 (ID, updateTree) (SYMBOL, () (ID, leftChild) (SYMBOL, ,) (ID, start) (SYMBOL, ,) (ID, mid) (SYMBOL, ,) (ID, idx) (SYMBOL, ,) (ID, val) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
166.	 (SYMBOL, }) (KEYWORD, else) (SYMBOL, {)
167.	 (ID, updateTree) (SYMBOL, () (ID, rigtChild) (SYMBOL, ,) (ID, mid) (SYMBOL, +) (NUM, 1) (SYMBOL, ,) (ID, end) (SYMBOL, ,) (ID, idx) (SYMBOL, ,) (ID, val) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
168.	 (SYMBOL, })
169.	 (ID, tree) (SYMBOL, [) (ID, node) (SYMBOL, ]) (SYMBOL, =) (ID, tree) (SYMBOL, [) (ID, leftChild) (SYMBOL, ]) (SYMBOL, +) (ID, tree) (SYMBOL, [) (ID, rigtChild) (SYMBOL, ]) (SYMBOL, ;)
170.	 (SYMBOL, })
171.	 (SYMBOL, })
173.	 (KEYWORD, int) (ID, queryTree) (SYMBOL, () (KEYWORD, int) (ID, node) (SYMBOL, ,) (KEYWORD, int) (ID, start) (SYMBOL, ,) (KEYWORD, int) (ID, end) (SYMBOL, ,) (KEYWORD, int) (ID, l) (SYMBOL, ,) (KEYWORD, int) (ID, r) (SYMBOL, ,) (KEYWORD, int) (ID, tree) (SYMBOL, [) (SYMBOL, ]) (SYMBOL, )) (SYMBOL, {)
174.	 (KEYWORD, int) (ID, mid) (SYMBOL, ;)
175.	 (KEYWORD, int) (ID, leftChild) (SYMBOL, ;)
176.	 (KEYWORD, int) (ID, rigtChild) (SYMBOL, ;)
177.	 (KEYWORD, int) (ID, leftSum) (SYMBOL, ;)
178.	 (KEYWORD, int) (ID, rightSum) (SYMBOL, ;)
179.	 (KEYWORD, int) (ID, tmp) (SYMBOL, ;)
180.	 (KEYWORD, if) (SYMBOL, () (SYMBOL, () (SYMBOL, () (ID, r) (SYMBOL, <) (ID, start) (SYMBOL, )) (SYMBOL, +) (SYMBOL, () (ID, end) (SYMBOL, <) (ID, l) (SYMBOL, )) (SYMBOL, )) (SYMBOL, )) (SYMBOL, {)
181.	 (KEYWORD, return) (NUM, 0) (SYMBOL, ;)
182.	 (SYMBOL, })
183.	 (KEYWORD, else) (KEYWORD, if) (SYMBOL, () (SYMBOL, () (SYMBOL, () (ID, l) (SYMBOL, <) (ID, start) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, *) (SYMBOL, () (ID, end) (SYMBOL, <) (ID, r) (SYMBOL, +) (NUM, 1) (SYMBOL, )) (SYMBOL, )) (SYMBOL, )) (SYMBOL, {)
184.	 (KEYWORD, return) (ID, tree) (SYMBOL, [) (ID, node) (SYMBOL, ]) (SYMBOL, ;)
185.	 (SYMBOL, })
186.	 (KEYWORD, else) (SYMBOL, {)
187.	 (ID, tmp) (SYMBOL, =) (ID, tmp) (SYMBOL, ;)
188.	 (SYMBOL, })
189.	 (ID, mid) (SYMBOL, =) (ID, Div) (SYMBOL, () (ID, start) (SYMBOL, +) (ID, end) (SYMBOL, ,) (NUM, 2) (SYMBOL, ,) (NUM, 0) (SYMBOL, )) (SYMBOL, ;)
190.	 (ID, leftChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, ;)
191.	 (ID, rigtChild) (SYMBOL, =) (NUM, 2) (SYMBOL, *) (ID, node) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
192.	 (ID, leftSum) (SYMBOL, =) (ID, queryTree) (SYMBOL, () (ID, leftChild) (SYMBOL, ,) (ID, start) (SYMBOL, ,) (ID, mid) (SYMBOL, ,) (ID, l) (SYMBOL, ,) (ID, r) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
193.	 (ID, rightSum) (SYMBOL, =) (ID, queryTree) (SYMBOL, () (ID, rigtChild) (SYMBOL, ,) (ID, mid) (SYMBOL, +) (NUM, 1) (SYMBOL, ,) (ID, end) (SYMBOL, ,) (ID, l) (SYMBOL, ,) (ID, r) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
194.	 (KEYWORD, return) (ID, leftSum) (SYMBOL, +) (ID, rightSum) (SYMBOL, ;)
195.	 (SYMBOL, })
197.	 (KEYWORD, void) (ID, main) (SYMBOL, () (KEYWORD, void) (SYMBOL, )) (SYMBOL, {)
198.	 (KEYWORD, int) (ID, a) (SYMBOL, ;)
199.	 (KEYWORD, int) (ID, b) (SYMBOL, ;)
200.	 (KEYWORD, int) (ID, base) (SYMBOL, [) (NUM, 16) (SYMBOL, ]) (SYMBOL, ;)
201.	 (KEYWORD, int) (ID, tree) (SYMBOL, [) (NUM, 64) (SYMBOL, ]) (SYMBOL, ;)
202.	 (KEYWORD, int) (ID, i) (SYMBOL, ;)
203.	 (KEYWORD, int) (ID, n) (SYMBOL, ;)
205.	 (ID, a) (SYMBOL, =) (NUM, 7) (SYMBOL, ;)
206.	 (ID, b) (SYMBOL, =) (NUM, 3) (SYMBOL, ;)
207.	 (ID, BinaryPrint) (SYMBOL, () (ID, a) (SYMBOL, )) (SYMBOL, ;)
208.	 (ID, BinaryPrint) (SYMBOL, () (ID, b) (SYMBOL, )) (SYMBOL, ;)
209.	 (ID, BinaryPrint) (SYMBOL, () (ID, Or) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
210.	 (ID, BinaryPrint) (SYMBOL, () (ID, And) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
211.	 (ID, BinaryPrint) (SYMBOL, () (ID, Xor) (SYMBOL, () (ID, a) (SYMBOL, ,) (ID, b) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
213.	 (ID, output) (SYMBOL, () (ID, Power) (SYMBOL, () (NUM, 3) (SYMBOL, ,) (NUM, 3) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
214.	 (ID, output) (SYMBOL, () (ID, SQRT) (SYMBOL, () (NUM, 999) (SYMBOL, ,) (NUM, 3) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
216.	 (ID, n) (SYMBOL, =) (NUM, 16) (SYMBOL, ;)
218.	 (ID, i) (SYMBOL, =) (NUM, 0) (SYMBOL, ;)
219.	 (KEYWORD, while) (SYMBOL, () (ID, i) (SYMBOL, <) (ID, n) (SYMBOL, )) (SYMBOL, {)
220.	 (ID, output) (SYMBOL, () (ID, a) (SYMBOL, )) (SYMBOL, ;)
221.	 (ID, base) (SYMBOL, [) (ID, i) (SYMBOL, ]) (SYMBOL, =) (ID, i) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
222.	 (ID, i) (SYMBOL, =) (ID, i) (SYMBOL, +) (NUM, 1) (SYMBOL, ;)
223.	 (SYMBOL, })
225.	 (ID, buildTree) (SYMBOL, () (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
227.	 (ID, output) (SYMBOL, () (ID, queryTree) (SYMBOL, () (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
229.	 (ID, updateTree) (SYMBOL, () (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (NUM, 3) (SYMBOL, ,) (NUM, 10) (SYMBOL, ,) (ID, base) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, ;)
231.	 (ID, output) (SYMBOL, () (ID, queryTree) (SYMBOL, () (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
233.	 (ID, output) (SYMBOL, () (ID, queryTree) (SYMBOL, () (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (ID, n) (SYMBOL, -) (NUM, 1) (SYMBOL, ,) (NUM, 0) (SYMBOL, ,) (NUM, 3) (SYMBOL, ,) (ID, tree) (SYMBOL, )) (SYMBOL, )) (SYMBOL, ;)
234.	 (SYMBOL, })
